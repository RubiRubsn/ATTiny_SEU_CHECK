
ATTiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000612  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  00800040  00000686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003a  00800040  00800040  00000686  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000686  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb1  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066d  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a9  00000000  00000000  00001992  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  00002290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000046d  00000000  00000000  0000271c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 27       	eor	r17, r17
  24:	1f bf       	out	0x3f, r17	; 63
  26:	cf eb       	ldi	r28, 0xBF	; 191
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e4       	ldi	r26, 0x40	; 64
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 93       	st	X+, r17

00000038 <.do_clear_bss_start>:
  38:	aa 37       	cpi	r26, 0x7A	; 122
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	b2 d2       	rcall	.+1380   	; 0x5a4 <main>
  40:	e6 c2       	rjmp	.+1484   	; 0x60e <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <_Z5TMRNURjS_S_>:
{
   return TMRNU(A.A, A.B, A.C);
};

uint16_t TMRNU(uint16_t &A, uint16_t &B, uint16_t &C)
{
  44:	2f 93       	push	r18
  46:	3f 93       	push	r19
  48:	cf 93       	push	r28
  4a:	df 93       	push	r29
  4c:	00 d0       	rcall	.+0      	; 0x4e <_Z5TMRNURjS_S_+0xa>
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
  52:	e8 2f       	mov	r30, r24
  54:	f9 2f       	mov	r31, r25
  56:	24 2f       	mov	r18, r20
  58:	35 2f       	mov	r19, r21
	if ((A == B) && (B == C))
  5a:	41 91       	ld	r20, Z+
  5c:	50 81       	ld	r21, Z
  5e:	e1 50       	subi	r30, 0x01	; 1
  60:	f0 40       	sbci	r31, 0x00	; 0
  62:	a6 2f       	mov	r26, r22
  64:	b7 2f       	mov	r27, r23
  66:	8d 91       	ld	r24, X+
  68:	9c 91       	ld	r25, X
  6a:	a2 2f       	mov	r26, r18
  6c:	b3 2f       	mov	r27, r19
  6e:	0d 91       	ld	r16, X+
  70:	bc 91       	ld	r27, X
  72:	a0 2f       	mov	r26, r16
  74:	ce 5f       	subi	r28, 0xFE	; 254
  76:	df 4f       	sbci	r29, 0xFF	; 255
  78:	b8 83       	st	Y, r27
  7a:	aa 93       	st	-Y, r26
  7c:	c1 50       	subi	r28, 0x01	; 1
  7e:	d0 40       	sbci	r29, 0x00	; 0
  80:	48 17       	cp	r20, r24
  82:	59 07       	cpc	r21, r25
  84:	81 f4       	brne	.+32     	; 0xa6 <__DATA_REGION_LENGTH__+0x26>
  86:	cf 5f       	subi	r28, 0xFF	; 255
  88:	df 4f       	sbci	r29, 0xFF	; 255
  8a:	88 81       	ld	r24, Y
  8c:	c1 50       	subi	r28, 0x01	; 1
  8e:	d0 40       	sbci	r29, 0x00	; 0
  90:	ce 5f       	subi	r28, 0xFE	; 254
  92:	df 4f       	sbci	r29, 0xFF	; 255
  94:	98 81       	ld	r25, Y
  96:	c2 50       	subi	r28, 0x02	; 2
  98:	d0 40       	sbci	r29, 0x00	; 0
  9a:	4a 17       	cp	r20, r26
  9c:	5b 07       	cpc	r21, r27
  9e:	c9 f0       	breq	.+50     	; 0xd2 <__stack+0x13>
	}
	else
	{
		if (A == B)
		{
			C = A;
  a0:	a2 2f       	mov	r26, r18
  a2:	b3 2f       	mov	r27, r19
  a4:	0b c0       	rjmp	.+22     	; 0xbc <__DATA_REGION_LENGTH__+0x3c>
		}
		else if (A == C)
  a6:	cf 5f       	subi	r28, 0xFF	; 255
  a8:	df 4f       	sbci	r29, 0xFF	; 255
  aa:	a9 91       	ld	r26, Y+
  ac:	b8 81       	ld	r27, Y
  ae:	c2 50       	subi	r28, 0x02	; 2
  b0:	d0 40       	sbci	r29, 0x00	; 0
  b2:	4a 17       	cp	r20, r26
  b4:	5b 07       	cpc	r21, r27
  b6:	29 f4       	brne	.+10     	; 0xc2 <__stack+0x3>
		{
			B = A;
  b8:	a6 2f       	mov	r26, r22
  ba:	b7 2f       	mov	r27, r23
  bc:	4d 93       	st	X+, r20
  be:	5c 93       	st	X, r21
  c0:	04 c0       	rjmp	.+8      	; 0xca <__stack+0xb>
		}
		else
		{
			A = B;
  c2:	ef 5f       	subi	r30, 0xFF	; 255
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	90 83       	st	Z, r25
  c8:	82 93       	st	-Z, r24
		}
	}
	return A;
  ca:	80 81       	ld	r24, Z
  cc:	ef 5f       	subi	r30, 0xFF	; 255
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	90 81       	ld	r25, Z
};
  d2:	0f 91       	pop	r16
  d4:	0f 91       	pop	r16
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	08 95       	ret

000000e0 <_Z5TMRNUR16tripple_uint16_t>:
uint8_t TMRNU(tripple_uint16_t &A)
{
	return TMRNU(A.A, A.B, A.C);
  e0:	48 2f       	mov	r20, r24
  e2:	59 2f       	mov	r21, r25
  e4:	4c 5f       	subi	r20, 0xFC	; 252
  e6:	5f 4f       	sbci	r21, 0xFF	; 255
  e8:	68 2f       	mov	r22, r24
  ea:	79 2f       	mov	r23, r25
  ec:	6e 5f       	subi	r22, 0xFE	; 254
  ee:	7f 4f       	sbci	r23, 0xFF	; 255
  f0:	a9 df       	rcall	.-174    	; 0x44 <_Z5TMRNURjS_S_>
};
  f2:	08 95       	ret

000000f4 <_Z7UART_tx15tripple_uint8_t>:



void UART_tx(tripple_uint8_t character)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	00 d0       	rcall	.+0      	; 0xfa <_Z7UART_tx15tripple_uint8_t+0x6>
  fa:	00 d0       	rcall	.+0      	; 0xfc <_Z7UART_tx15tripple_uint8_t+0x8>
  fc:	00 d0       	rcall	.+0      	; 0xfe <_Z7UART_tx15tripple_uint8_t+0xa>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62

   tripple_uint16_t send_buffer;
   send_buffer.A = (uint16_t)(character.A << 1) | (uint16_t)(1 << 9);
 102:	46 2f       	mov	r20, r22
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	52 60       	ori	r21, 0x02	; 2
 10c:	ce 5f       	subi	r28, 0xFE	; 254
 10e:	df 4f       	sbci	r29, 0xFF	; 255
 110:	58 83       	st	Y, r21
 112:	4a 93       	st	-Y, r20
 114:	c1 50       	subi	r28, 0x01	; 1
 116:	d0 40       	sbci	r29, 0x00	; 0
   send_buffer.B = (uint16_t)(character.B << 1) | (uint16_t)(1 << 9);
 118:	47 2f       	mov	r20, r23
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	52 60       	ori	r21, 0x02	; 2
 122:	cc 5f       	subi	r28, 0xFC	; 252
 124:	df 4f       	sbci	r29, 0xFF	; 255
 126:	58 83       	st	Y, r21
 128:	4a 93       	st	-Y, r20
 12a:	c3 50       	subi	r28, 0x03	; 3
 12c:	d0 40       	sbci	r29, 0x00	; 0
   send_buffer.C = (uint16_t)(character.C << 1) | (uint16_t)(1 << 9);
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	92 60       	ori	r25, 0x02	; 2
 136:	ca 5f       	subi	r28, 0xFA	; 250
 138:	df 4f       	sbci	r29, 0xFF	; 255
 13a:	98 83       	st	Y, r25
 13c:	8a 93       	st	-Y, r24
 13e:	c5 50       	subi	r28, 0x05	; 5
 140:	d0 40       	sbci	r29, 0x00	; 0
   TMRNU(send_buffer);
 142:	8c 2f       	mov	r24, r28
 144:	9d 2f       	mov	r25, r29
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	ca df       	rcall	.-108    	; 0xe0 <_Z5TMRNUR16tripple_uint16_t>


   // start timer0 with a prescaler of 8
   TCCR0B = (1 << CS01);
 14c:	42 e0       	ldi	r20, 0x02	; 2
 14e:	48 bb       	out	0x18, r20	; 24
   while (TMRNU(send_buffer) != 0)
 150:	8c 2f       	mov	r24, r28
 152:	9d 2f       	mov	r25, r29
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	9f 4f       	sbci	r25, 0xFF	; 255
 158:	c3 df       	rcall	.-122    	; 0xe0 <_Z5TMRNUR16tripple_uint16_t>
 15a:	88 23       	and	r24, r24
 15c:	09 f4       	brne	.+2      	; 0x160 <_Z7UART_tx15tripple_uint8_t+0x6c>
 15e:	3f c0       	rjmp	.+126    	; 0x1de <_Z7UART_tx15tripple_uint8_t+0xea>
   {
      while ((TIFR &= (1 << OCF0A)) == 0)
 160:	45 b5       	in	r20, 0x25	; 37
 162:	42 70       	andi	r20, 0x02	; 2
 164:	45 bd       	out	0x25, r20	; 37
 166:	44 23       	and	r20, r20
 168:	d9 f3       	breq	.-10     	; 0x160 <_Z7UART_tx15tripple_uint8_t+0x6c>
      {
      }
      if (TMRNU(send_buffer) & 0x01)
 16a:	8c 2f       	mov	r24, r28
 16c:	9d 2f       	mov	r25, r29
 16e:	8f 5f       	subi	r24, 0xFF	; 255
 170:	9f 4f       	sbci	r25, 0xFF	; 255
 172:	b6 df       	rcall	.-148    	; 0xe0 <_Z5TMRNUR16tripple_uint16_t>
 174:	80 ff       	sbrs	r24, 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <_Z7UART_tx15tripple_uint8_t+0x88>
      {
         TX_PORT |= (1 << TX_PIN);
 178:	31 9a       	sbi	0x06, 1	; 6
 17a:	01 c0       	rjmp	.+2      	; 0x17e <_Z7UART_tx15tripple_uint8_t+0x8a>
      }
      else
      {
         TX_PORT &= ~(1 << TX_PIN);
 17c:	31 98       	cbi	0x06, 1	; 6
      }
      send_buffer.A >>= 1;
 17e:	cf 5f       	subi	r28, 0xFF	; 255
 180:	df 4f       	sbci	r29, 0xFF	; 255
 182:	49 91       	ld	r20, Y+
 184:	58 81       	ld	r21, Y
 186:	c2 50       	subi	r28, 0x02	; 2
 188:	d0 40       	sbci	r29, 0x00	; 0
 18a:	56 95       	lsr	r21
 18c:	47 95       	ror	r20
 18e:	ce 5f       	subi	r28, 0xFE	; 254
 190:	df 4f       	sbci	r29, 0xFF	; 255
 192:	58 83       	st	Y, r21
 194:	4a 93       	st	-Y, r20
 196:	c1 50       	subi	r28, 0x01	; 1
 198:	d0 40       	sbci	r29, 0x00	; 0
      send_buffer.B >>= 1;
 19a:	cd 5f       	subi	r28, 0xFD	; 253
 19c:	df 4f       	sbci	r29, 0xFF	; 255
 19e:	49 91       	ld	r20, Y+
 1a0:	58 81       	ld	r21, Y
 1a2:	c4 50       	subi	r28, 0x04	; 4
 1a4:	d0 40       	sbci	r29, 0x00	; 0
 1a6:	56 95       	lsr	r21
 1a8:	47 95       	ror	r20
 1aa:	cc 5f       	subi	r28, 0xFC	; 252
 1ac:	df 4f       	sbci	r29, 0xFF	; 255
 1ae:	58 83       	st	Y, r21
 1b0:	4a 93       	st	-Y, r20
 1b2:	c3 50       	subi	r28, 0x03	; 3
 1b4:	d0 40       	sbci	r29, 0x00	; 0
      send_buffer.C >>= 1;
 1b6:	cb 5f       	subi	r28, 0xFB	; 251
 1b8:	df 4f       	sbci	r29, 0xFF	; 255
 1ba:	49 91       	ld	r20, Y+
 1bc:	58 81       	ld	r21, Y
 1be:	c6 50       	subi	r28, 0x06	; 6
 1c0:	d0 40       	sbci	r29, 0x00	; 0
 1c2:	56 95       	lsr	r21
 1c4:	47 95       	ror	r20
 1c6:	ca 5f       	subi	r28, 0xFA	; 250
 1c8:	df 4f       	sbci	r29, 0xFF	; 255
 1ca:	58 83       	st	Y, r21
 1cc:	4a 93       	st	-Y, r20
 1ce:	c5 50       	subi	r28, 0x05	; 5
 1d0:	d0 40       	sbci	r29, 0x00	; 0
      TMRNU(send_buffer);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	9d 2f       	mov	r25, r29
 1d6:	8f 5f       	subi	r24, 0xFF	; 255
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	82 df       	rcall	.-252    	; 0xe0 <_Z5TMRNUR16tripple_uint16_t>
   TMRNU(send_buffer);


   // start timer0 with a prescaler of 8
   TCCR0B = (1 << CS01);
   while (TMRNU(send_buffer) != 0)
 1dc:	b9 cf       	rjmp	.-142    	; 0x150 <_Z7UART_tx15tripple_uint8_t+0x5c>
      send_buffer.A >>= 1;
      send_buffer.B >>= 1;
      send_buffer.C >>= 1;
      TMRNU(send_buffer);
   }
   TCCR0B = 0;
 1de:	18 bb       	out	0x18, r17	; 24
   TCNT0 = 0;
 1e0:	17 bb       	out	0x17, r17	; 23
}
 1e2:	0f 91       	pop	r16
 1e4:	0f 91       	pop	r16
 1e6:	0f 91       	pop	r16
 1e8:	0f 91       	pop	r16
 1ea:	0f 91       	pop	r16
 1ec:	0f 91       	pop	r16
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <_Z7UART_txc>:
{
   tripple_uint8_t help;
   help.A = character;
   help.B = character;
   help.C = character;
   UART_tx(help);
 1f4:	68 2f       	mov	r22, r24
 1f6:	78 2f       	mov	r23, r24
 1f8:	7d df       	rcall	.-262    	; 0xf4 <_Z7UART_tx15tripple_uint8_t>
 1fa:	08 95       	ret

000001fc <_Z9UART_initv>:
}

void UART_init()
{
   // set TX pin as output
   TX_DDR |= (1 << TX_DDR_PIN);
 1fc:	29 9a       	sbi	0x05, 1	; 5
   TX_PORT |= (1 << TX_PIN);
 1fe:	31 9a       	sbi	0x06, 1	; 6

   // set timer0 to CTC mode clear timer on compare match
   TCCR0A = (1 << WGM01);
 200:	42 e0       	ldi	r20, 0x02	; 2
 202:	49 bb       	out	0x19, r20	; 25
   NOTE: since the internal 8MHz oscillator is not very accurate, this value can be tuned
   to achieve the desired baud rate, so if it doesn't work with the nominal value (103), try
   increasing or decreasing the value by 1 or 2
   */

   OCR0A = 103; // Default == 103
 204:	47 e6       	ldi	r20, 0x67	; 103
 206:	46 bb       	out	0x16, r20	; 22
 208:	08 95       	ret

0000020a <_Z16uart_send_reporthhh>:


}

void uart_send_report(uint8_t address, uint8_t content, uint8_t corr_cont)
{
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	26 2f       	mov	r18, r22
 218:	34 2f       	mov	r19, r20
   h_content.B = content;
   h_content.C = content;
   h_corr_cont.A = corr_cont;
   h_corr_cont.B = corr_cont;
   h_corr_cont.C = corr_cont;
   UART_tx(h_adress);
 21a:	68 2f       	mov	r22, r24
 21c:	78 2f       	mov	r23, r24
 21e:	6a df       	rcall	.-300    	; 0xf4 <_Z7UART_tx15tripple_uint8_t>
   UART_tx(h_content);
 220:	62 2f       	mov	r22, r18
 222:	72 2f       	mov	r23, r18
 224:	82 2f       	mov	r24, r18
 226:	66 df       	rcall	.-308    	; 0xf4 <_Z7UART_tx15tripple_uint8_t>
   UART_tx(h_corr_cont);
 228:	63 2f       	mov	r22, r19
 22a:	73 2f       	mov	r23, r19
 22c:	83 2f       	mov	r24, r19
 22e:	62 df       	rcall	.-316    	; 0xf4 <_Z7UART_tx15tripple_uint8_t>
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	08 95       	ret

0000023a <_Z13test_registerv>:

uint8_t counter = 0;

void test_register()
{
	if ((PORTCR & 0x03) != 0)
 23a:	48 b1       	in	r20, 0x08	; 8
 23c:	43 70       	andi	r20, 0x03	; 3
 23e:	51 f0       	breq	.+20     	; 0x254 <_Z13test_registerv+0x1a>
	{
		adr = 0x08;
 240:	48 e0       	ldi	r20, 0x08	; 8
 242:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = PORTCR & 0x3;
 244:	48 b1       	in	r20, 0x08	; 8
 246:	43 70       	andi	r20, 0x03	; 3
 248:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		PORTCR = PORTCR & ~(0x3);
 24a:	48 b1       	in	r20, 0x08	; 8
 24c:	4c 7f       	andi	r20, 0xFC	; 252
 24e:	48 b9       	out	0x08, r20	; 8
		corrected_val = PORTCR;
 250:	48 b1       	in	r20, 0x08	; 8
 252:	09 c1       	rjmp	.+530    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (PCMSK0 != 0)
 254:	49 b1       	in	r20, 0x09	; 9
 256:	44 23       	and	r20, r20
 258:	39 f0       	breq	.+14     	; 0x268 <_Z13test_registerv+0x2e>
	{
		adr = 0x09;
 25a:	49 e0       	ldi	r20, 0x09	; 9
 25c:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = PCMSK0;
 25e:	49 b1       	in	r20, 0x09	; 9
 260:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		PCMSK0 = 0x00;
 262:	19 b9       	out	0x09, r17	; 9
		corrected_val = PCMSK0;
 264:	49 b1       	in	r20, 0x09	; 9
 266:	ff c0       	rjmp	.+510    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((PCMSK1 & (0x0F)) != 0)
 268:	4a b1       	in	r20, 0x0a	; 10
 26a:	4f 70       	andi	r20, 0x0F	; 15
 26c:	51 f0       	breq	.+20     	; 0x282 <_Z13test_registerv+0x48>
	{
		adr = 0x0A;
 26e:	4a e0       	ldi	r20, 0x0A	; 10
 270:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = PCMSK1 & (0x0F);
 272:	4a b1       	in	r20, 0x0a	; 10
 274:	4f 70       	andi	r20, 0x0F	; 15
 276:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		PCMSK1 = PCMSK1 & ~(0x0F);
 278:	4a b1       	in	r20, 0x0a	; 10
 27a:	40 7f       	andi	r20, 0xF0	; 240
 27c:	4a b9       	out	0x0a, r20	; 10
		corrected_val = PCMSK1;
 27e:	4a b1       	in	r20, 0x0a	; 10
 280:	f2 c0       	rjmp	.+484    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (DIDR0 != 0)
 282:	4d b1       	in	r20, 0x0d	; 13
 284:	44 23       	and	r20, r20
 286:	39 f0       	breq	.+14     	; 0x296 <_Z13test_registerv+0x5c>
	{
		adr = 0x0D;
 288:	4d e0       	ldi	r20, 0x0D	; 13
 28a:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = DIDR0;
 28c:	4d b1       	in	r20, 0x0d	; 13
 28e:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		DIDR0 = 0x00;
 290:	1d b9       	out	0x0d, r17	; 13
		corrected_val = DIDR0;
 292:	4d b1       	in	r20, 0x0d	; 13
 294:	e8 c0       	rjmp	.+464    	; 0x466 <_Z13test_registerv+0x22c>
	// 	val = ADCH;
	// 	ADCH = 0x00;
	// 	UART_tx('$');
	// 	uart_send_report(adr, val);
	// }
	else if ((ADMUX & (0x7F)) != 0)
 296:	40 b3       	in	r20, 0x10	; 16
 298:	4f 77       	andi	r20, 0x7F	; 127
 29a:	59 f0       	breq	.+22     	; 0x2b2 <_Z13test_registerv+0x78>
	{
		adr = 0x10;
 29c:	40 e1       	ldi	r20, 0x10	; 16
 29e:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = ADMUX & 0x7F;
 2a0:	40 b3       	in	r20, 0x10	; 16
 2a2:	4f 77       	andi	r20, 0x7F	; 127
 2a4:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		ADMUX = ADMUX & ~(0x7F);
 2a6:	40 b3       	in	r20, 0x10	; 16
 2a8:	40 78       	andi	r20, 0x80	; 128
 2aa:	40 bb       	out	0x10, r20	; 16
		corrected_val = ADMUX & 0x7F;
 2ac:	40 b3       	in	r20, 0x10	; 16
 2ae:	4f 77       	andi	r20, 0x7F	; 127
 2b0:	da c0       	rjmp	.+436    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((ADCSRB & (0xCF)) != 0)
 2b2:	41 b3       	in	r20, 0x11	; 17
 2b4:	4f 7c       	andi	r20, 0xCF	; 207
 2b6:	51 f0       	breq	.+20     	; 0x2cc <_Z13test_registerv+0x92>
	{
		adr = 0x11;
 2b8:	41 e1       	ldi	r20, 0x11	; 17
 2ba:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = ADCSRB & (0xCF);
 2bc:	41 b3       	in	r20, 0x11	; 17
 2be:	4f 7c       	andi	r20, 0xCF	; 207
 2c0:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		ADCSRB = ADCSRB & ~(0xCF);
 2c2:	41 b3       	in	r20, 0x11	; 17
 2c4:	40 73       	andi	r20, 0x30	; 48
 2c6:	41 bb       	out	0x11, r20	; 17
		corrected_val = ADCSRB & (0xCF);
 2c8:	41 b3       	in	r20, 0x11	; 17
 2ca:	8a c0       	rjmp	.+276    	; 0x3e0 <_Z13test_registerv+0x1a6>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (ADCSRA != 0)
 2cc:	42 b3       	in	r20, 0x12	; 18
 2ce:	44 23       	and	r20, r20
 2d0:	39 f0       	breq	.+14     	; 0x2e0 <_Z13test_registerv+0xa6>
	{
		adr = 0x12;
 2d2:	42 e1       	ldi	r20, 0x12	; 18
 2d4:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = ADCSRA;
 2d6:	42 b3       	in	r20, 0x12	; 18
 2d8:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		ADCSRA = 0x00;
 2da:	12 bb       	out	0x12, r17	; 18
		corrected_val = ADCSRA;
 2dc:	42 b3       	in	r20, 0x12	; 18
 2de:	c3 c0       	rjmp	.+390    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((ACSRB & 0xEF) != 0)
 2e0:	43 b3       	in	r20, 0x13	; 19
 2e2:	4f 7e       	andi	r20, 0xEF	; 239
 2e4:	59 f0       	breq	.+22     	; 0x2fc <_Z13test_registerv+0xc2>
	{
		adr = 0x13;
 2e6:	43 e1       	ldi	r20, 0x13	; 19
 2e8:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = ACSRB & 0xEF;
 2ea:	43 b3       	in	r20, 0x13	; 19
 2ec:	4f 7e       	andi	r20, 0xEF	; 239
 2ee:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		ACSRB = ACSRB & ~0xEF;
 2f0:	43 b3       	in	r20, 0x13	; 19
 2f2:	40 71       	andi	r20, 0x10	; 16
 2f4:	43 bb       	out	0x13, r20	; 19
		corrected_val = ACSRB & 0xEF;
 2f6:	43 b3       	in	r20, 0x13	; 19
 2f8:	4f 7e       	andi	r20, 0xEF	; 239
 2fa:	b5 c0       	rjmp	.+362    	; 0x466 <_Z13test_registerv+0x22c>
	// 	val = ACSRA & 0xCF;
	// 	ACSRA = ACSRA & ~0xCF;
	// 	UART_tx('$');
	// 	uart_send_report(adr, val);
	// }
	else if (OCR0B != 0)
 2fc:	45 b3       	in	r20, 0x15	; 21
 2fe:	44 23       	and	r20, r20
 300:	39 f0       	breq	.+14     	; 0x310 <_Z13test_registerv+0xd6>
	{
		adr = 0x15;
 302:	45 e1       	ldi	r20, 0x15	; 21
 304:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = OCR0B;
 306:	45 b3       	in	r20, 0x15	; 21
 308:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		OCR0B = 0x00;
 30a:	15 bb       	out	0x15, r17	; 21
		corrected_val = OCR0B;
 30c:	45 b3       	in	r20, 0x15	; 21
 30e:	ab c0       	rjmp	.+342    	; 0x466 <_Z13test_registerv+0x22c>
	// 	val = TCCR0B;
	// 	UART_tx('$');
	// 	uart_send_report(adr, val);
	// 	TCCR0B = 0x00;
	// }
	else if (TCNT1L != 0)
 310:	40 b5       	in	r20, 0x20	; 32
 312:	44 23       	and	r20, r20
 314:	39 f0       	breq	.+14     	; 0x324 <_Z13test_registerv+0xea>
	{
		adr = 0x20;
 316:	40 e2       	ldi	r20, 0x20	; 32
 318:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TCNT1L;
 31a:	40 b5       	in	r20, 0x20	; 32
 31c:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TCNT1L = 0x00;
 31e:	10 bd       	out	0x20, r17	; 32
		corrected_val = TCNT1L;
 320:	40 b5       	in	r20, 0x20	; 32
 322:	a1 c0       	rjmp	.+322    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (TCNT1H != 0)
 324:	41 b5       	in	r20, 0x21	; 33
 326:	44 23       	and	r20, r20
 328:	39 f0       	breq	.+14     	; 0x338 <_Z13test_registerv+0xfe>
	{
		adr = 0x21;
 32a:	41 e2       	ldi	r20, 0x21	; 33
 32c:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TCNT1H;
 32e:	41 b5       	in	r20, 0x21	; 33
 330:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TCNT1H = 0x00;
 332:	11 bd       	out	0x21, r17	; 33
		corrected_val = TCNT1H;
 334:	41 b5       	in	r20, 0x21	; 33
 336:	97 c0       	rjmp	.+302    	; 0x466 <_Z13test_registerv+0x22c>
	// 	val = TCCR1C & 0xC0;
	// 	TCCR1C = TCCR1C & ~(0xC0);
	// 	UART_tx('$');
	// 	uart_send_report(adr, val);
	// }
	else if ((TCCR1B & 0xDF) != 0)
 338:	43 b5       	in	r20, 0x23	; 35
 33a:	4f 7d       	andi	r20, 0xDF	; 223
 33c:	51 f0       	breq	.+20     	; 0x352 <_Z13test_registerv+0x118>
	{
		adr = 0x23;
 33e:	43 e2       	ldi	r20, 0x23	; 35
 340:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TCCR1B & 0xDF;
 342:	43 b5       	in	r20, 0x23	; 35
 344:	4f 7d       	andi	r20, 0xDF	; 223
 346:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TCCR1B = TCCR1B & ~(0xDF);
 348:	43 b5       	in	r20, 0x23	; 35
 34a:	40 72       	andi	r20, 0x20	; 32
 34c:	43 bd       	out	0x23, r20	; 35
		corrected_val = TCCR1B & 0xDF;
 34e:	43 b5       	in	r20, 0x23	; 35
 350:	89 c0       	rjmp	.+274    	; 0x464 <_Z13test_registerv+0x22a>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((TCCR1A & 0xF3) != 0)
 352:	44 b5       	in	r20, 0x24	; 36
 354:	43 7f       	andi	r20, 0xF3	; 243
 356:	59 f0       	breq	.+22     	; 0x36e <_Z13test_registerv+0x134>
	{
		adr = 0x24;
 358:	44 e2       	ldi	r20, 0x24	; 36
 35a:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TCCR1A & 0xF3;
 35c:	44 b5       	in	r20, 0x24	; 36
 35e:	43 7f       	andi	r20, 0xF3	; 243
 360:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TCCR1A = TCCR1A & ~(0xf3);
 362:	44 b5       	in	r20, 0x24	; 36
 364:	4c 70       	andi	r20, 0x0C	; 12
 366:	44 bd       	out	0x24, r20	; 36
		corrected_val = TCCR1A & 0xF3;
 368:	44 b5       	in	r20, 0x24	; 36
 36a:	43 7f       	andi	r20, 0xF3	; 243
 36c:	7c c0       	rjmp	.+248    	; 0x466 <_Z13test_registerv+0x22c>
	// 	adr = 0xff;
	// 	val = 0x26;
	// 	uart_send_report(adr, val);
	// 	TIMSK = 0x00;
	// }
	else if ((GTCCR & 0x81) != 0)
 36e:	47 b5       	in	r20, 0x27	; 39
 370:	41 78       	andi	r20, 0x81	; 129
 372:	59 f0       	breq	.+22     	; 0x38a <_Z13test_registerv+0x150>
	{
		adr = 0x27;
 374:	47 e2       	ldi	r20, 0x27	; 39
 376:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = GTCCR & 0x81;
 378:	47 b5       	in	r20, 0x27	; 39
 37a:	41 78       	andi	r20, 0x81	; 129
 37c:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		GTCCR = GTCCR & ~0x81;
 37e:	47 b5       	in	r20, 0x27	; 39
 380:	4e 77       	andi	r20, 0x7E	; 126
 382:	47 bd       	out	0x27, r20	; 39
		corrected_val = GTCCR & 0x81;
 384:	47 b5       	in	r20, 0x27	; 39
 386:	41 78       	andi	r20, 0x81	; 129
 388:	6e c0       	rjmp	.+220    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (TWSD != 0)
 38a:	48 b5       	in	r20, 0x28	; 40
 38c:	44 23       	and	r20, r20
 38e:	41 f0       	breq	.+16     	; 0x3a0 <_Z13test_registerv+0x166>
	{
		adr = 0x28;
 390:	48 e2       	ldi	r20, 0x28	; 40
 392:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSD;
 394:	48 b5       	in	r20, 0x28	; 40
 396:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSD = 0x00;
 398:	18 bd       	out	0x28, r17	; 40
		corrected_val = TWSD = 0x00;
 39a:	18 bd       	out	0x28, r17	; 40
 39c:	15 a9       	sts	0x45, r17	; 0x800045 <corrected_val>
 39e:	64 c0       	rjmp	.+200    	; 0x468 <_Z13test_registerv+0x22e>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (TWSAM != 0)
 3a0:	49 b5       	in	r20, 0x29	; 41
 3a2:	44 23       	and	r20, r20
 3a4:	39 f0       	breq	.+14     	; 0x3b4 <_Z13test_registerv+0x17a>
	{
		adr = 0x29;
 3a6:	49 e2       	ldi	r20, 0x29	; 41
 3a8:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSAM;
 3aa:	49 b5       	in	r20, 0x29	; 41
 3ac:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSAM = 0x00;
 3ae:	19 bd       	out	0x29, r17	; 41
		corrected_val = TWSAM;
 3b0:	49 b5       	in	r20, 0x29	; 41
 3b2:	59 c0       	rjmp	.+178    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (TWSA != 0)
 3b4:	4a b5       	in	r20, 0x2a	; 42
 3b6:	44 23       	and	r20, r20
 3b8:	39 f0       	breq	.+14     	; 0x3c8 <_Z13test_registerv+0x18e>
	{
		adr = 0x2A;
 3ba:	4a e2       	ldi	r20, 0x2A	; 42
 3bc:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSA;
 3be:	4a b5       	in	r20, 0x2a	; 42
 3c0:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSA = 0x00;
 3c2:	1a bd       	out	0x2a, r17	; 42
		corrected_val = TWSA;
 3c4:	4a b5       	in	r20, 0x2a	; 42
 3c6:	4f c0       	rjmp	.+158    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((TWSSRA & 0xCF) != 0)
 3c8:	4b b5       	in	r20, 0x2b	; 43
 3ca:	4f 7c       	andi	r20, 0xCF	; 207
 3cc:	59 f0       	breq	.+22     	; 0x3e4 <_Z13test_registerv+0x1aa>
	{
		adr = 0x2B;
 3ce:	4b e2       	ldi	r20, 0x2B	; 43
 3d0:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSSRA & 0xCF;
 3d2:	4b b5       	in	r20, 0x2b	; 43
 3d4:	4f 7c       	andi	r20, 0xCF	; 207
 3d6:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSSRA = TWSSRA & ~0xCF;
 3d8:	4b b5       	in	r20, 0x2b	; 43
 3da:	40 73       	andi	r20, 0x30	; 48
 3dc:	4b bd       	out	0x2b, r20	; 43
		corrected_val = TWSSRA & 0xCF;
 3de:	4b b5       	in	r20, 0x2b	; 43
 3e0:	4f 7c       	andi	r20, 0xCF	; 207
 3e2:	41 c0       	rjmp	.+130    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((TWSCRB & 0x04) != 0)
 3e4:	0c b5       	in	r16, 0x2c	; 44
 3e6:	02 ff       	sbrs	r16, 2
 3e8:	0b c0       	rjmp	.+22     	; 0x400 <_Z13test_registerv+0x1c6>
	{
		adr = 0x2C;
 3ea:	4c e2       	ldi	r20, 0x2C	; 44
 3ec:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSCRB & 0x04;
 3ee:	4c b5       	in	r20, 0x2c	; 44
 3f0:	44 70       	andi	r20, 0x04	; 4
 3f2:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSCRB = TWSCRB & ~(0x04);
 3f4:	4c b5       	in	r20, 0x2c	; 44
 3f6:	4b 7f       	andi	r20, 0xFB	; 251
 3f8:	4c bd       	out	0x2c, r20	; 44
		corrected_val = TWSCRB & 0x04;
 3fa:	4c b5       	in	r20, 0x2c	; 44
 3fc:	44 70       	andi	r20, 0x04	; 4
 3fe:	33 c0       	rjmp	.+102    	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((TWSCRA & 0xBF) != 0)
 400:	4d b5       	in	r20, 0x2d	; 45
 402:	4f 7b       	andi	r20, 0xBF	; 191
 404:	59 f0       	breq	.+22     	; 0x41c <_Z13test_registerv+0x1e2>
	{
		adr = 0x2D;
 406:	4d e2       	ldi	r20, 0x2D	; 45
 408:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = TWSCRA & 0xBF;
 40a:	4d b5       	in	r20, 0x2d	; 45
 40c:	4f 7b       	andi	r20, 0xBF	; 191
 40e:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		TWSCRA = TWSCRA & ~(0xBF);
 410:	4d b5       	in	r20, 0x2d	; 45
 412:	40 74       	andi	r20, 0x40	; 64
 414:	4d bd       	out	0x2d, r20	; 45
		corrected_val = TWSCRA & 0xBF;
 416:	4d b5       	in	r20, 0x2d	; 45
 418:	4f 7b       	andi	r20, 0xBF	; 191
 41a:	25 c0       	rjmp	.+74     	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if (SPCR != 0)
 41c:	40 b7       	in	r20, 0x30	; 48
 41e:	44 23       	and	r20, r20
 420:	39 f0       	breq	.+14     	; 0x430 <_Z13test_registerv+0x1f6>
	{
		adr = 0x30;
 422:	40 e3       	ldi	r20, 0x30	; 48
 424:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = SPCR;
 426:	40 b7       	in	r20, 0x30	; 48
 428:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		SPCR = 0x00;
 42a:	10 bf       	out	0x30, r17	; 48
		corrected_val = SPCR;
 42c:	40 b7       	in	r20, 0x30	; 48
 42e:	1b c0       	rjmp	.+54     	; 0x466 <_Z13test_registerv+0x22c>
		UART_tx('$');
		UART_tx('$');
		uart_send_report(adr, val, corrected_val);
	}
	else if ((PRR & 0x1F) != 0)
 430:	45 b7       	in	r20, 0x35	; 53
 432:	4f 71       	andi	r20, 0x1F	; 31
 434:	59 f0       	breq	.+22     	; 0x44c <_Z13test_registerv+0x212>
	{
		adr = 0x35;
 436:	45 e3       	ldi	r20, 0x35	; 53
 438:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = PRR & 0x1F;
 43a:	45 b7       	in	r20, 0x35	; 53
 43c:	4f 71       	andi	r20, 0x1F	; 31
 43e:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		PRR = PRR & ~(0x1F);
 440:	45 b7       	in	r20, 0x35	; 53
 442:	40 7e       	andi	r20, 0xE0	; 224
 444:	45 bf       	out	0x35, r20	; 53
		corrected_val = PRR & 0x1F;
 446:	45 b7       	in	r20, 0x35	; 53
 448:	4f 71       	andi	r20, 0x1F	; 31
 44a:	0d c0       	rjmp	.+26     	; 0x466 <_Z13test_registerv+0x22c>
	// 	adr = 0xff;
	// 	val = 0x39;
	// 	uart_send_report(adr, val);
	// 	OSCCAL = 0x00;
	// }
	else if ((MCUCR & 0xDF) != 0)
 44c:	4a b7       	in	r20, 0x3a	; 58
 44e:	4f 7d       	andi	r20, 0xDF	; 223
 450:	99 f0       	breq	.+38     	; 0x478 <_Z13test_registerv+0x23e>
	{
		adr = 0x3A;
 452:	4a e3       	ldi	r20, 0x3A	; 58
 454:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
		val = MCUCR & 0xDF;
 456:	4a b7       	in	r20, 0x3a	; 58
 458:	4f 7d       	andi	r20, 0xDF	; 223
 45a:	46 a9       	sts	0x46, r20	; 0x800046 <val>
		MCUCR = MCUCR & ~(0xDF);
 45c:	4a b7       	in	r20, 0x3a	; 58
 45e:	40 72       	andi	r20, 0x20	; 32
 460:	4a bf       	out	0x3a, r20	; 58
		corrected_val = MCUCR & 0xDF;
 462:	4a b7       	in	r20, 0x3a	; 58
 464:	4f 7d       	andi	r20, 0xDF	; 223
 466:	45 a9       	sts	0x45, r20	; 0x800045 <corrected_val>
		UART_tx('$');
 468:	84 e2       	ldi	r24, 0x24	; 36
 46a:	c4 de       	rcall	.-632    	; 0x1f4 <_Z7UART_txc>
		UART_tx('$');
 46c:	84 e2       	ldi	r24, 0x24	; 36
 46e:	c2 de       	rcall	.-636    	; 0x1f4 <_Z7UART_txc>
		uart_send_report(adr, val, corrected_val);
 470:	45 a1       	lds	r20, 0x45	; 0x800045 <corrected_val>
 472:	66 a1       	lds	r22, 0x46	; 0x800046 <val>
 474:	87 a1       	lds	r24, 0x47	; 0x800047 <adr>
 476:	c9 ce       	rjmp	.-622    	; 0x20a <_Z16uart_send_reporthhh>
 478:	08 95       	ret

0000047a <_Z3TMRRhS_S_>:
#define TEST_PATTERN 0xAA

void test_memory();

uint8_t TMR(uint8_t &A, uint8_t &B, uint8_t &C)
{
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	e8 2f       	mov	r30, r24
 488:	f9 2f       	mov	r31, r25
 48a:	26 2f       	mov	r18, r22
 48c:	37 2f       	mov	r19, r23
	if ((A == B) && (B == C))
 48e:	60 81       	ld	r22, Z
 490:	a2 2f       	mov	r26, r18
 492:	b3 2f       	mov	r27, r19
 494:	7c 91       	ld	r23, X
 496:	a4 2f       	mov	r26, r20
 498:	b5 2f       	mov	r27, r21
 49a:	8c 91       	ld	r24, X
 49c:	67 13       	cpse	r22, r23
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <_Z3TMRRhS_S_+0x38>
 4a0:	68 17       	cp	r22, r24
 4a2:	31 f1       	breq	.+76     	; 0x4f0 <_Z3TMRRhS_S_+0x76>
	else
	{

		if (A == B)
		{
			adr = (uint8_t)(short)&C;
 4a4:	47 a9       	sts	0x47, r20	; 0x800047 <adr>
			val = C;
 4a6:	6c 91       	ld	r22, X
 4a8:	66 a9       	sts	0x46, r22	; 0x800046 <val>
			C = A;
 4aa:	60 81       	ld	r22, Z
 4ac:	6c 93       	st	X, r22
			corrected_val = C;
 4ae:	65 a9       	sts	0x45, r22	; 0x800045 <corrected_val>
 4b0:	12 c0       	rjmp	.+36     	; 0x4d6 <_Z3TMRRhS_S_+0x5c>
		}
		else if (A == C)
 4b2:	68 13       	cpse	r22, r24
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <_Z3TMRRhS_S_+0x4c>
		{
			adr = (uint8_t)(short)&B;
 4b6:	27 a9       	sts	0x47, r18	; 0x800047 <adr>
			val = B;
 4b8:	a2 2f       	mov	r26, r18
 4ba:	b3 2f       	mov	r27, r19
 4bc:	4c 91       	ld	r20, X
 4be:	46 a9       	sts	0x46, r20	; 0x800046 <val>
			B = A;
 4c0:	40 81       	ld	r20, Z
 4c2:	4c 93       	st	X, r20
 4c4:	07 c0       	rjmp	.+14     	; 0x4d4 <_Z3TMRRhS_S_+0x5a>
			corrected_val = B;
		}
		else
		{
			adr = (uint8_t)(short)&A;
 4c6:	e7 a9       	sts	0x47, r30	; 0x800047 <adr>
			val = A;
 4c8:	40 81       	ld	r20, Z
 4ca:	46 a9       	sts	0x46, r20	; 0x800046 <val>
			A = B;
 4cc:	a2 2f       	mov	r26, r18
 4ce:	b3 2f       	mov	r27, r19
 4d0:	4c 91       	ld	r20, X
 4d2:	40 83       	st	Z, r20
			corrected_val = A;
 4d4:	45 a9       	sts	0x45, r20	; 0x800045 <corrected_val>
 4d6:	2e 2f       	mov	r18, r30
 4d8:	3f 2f       	mov	r19, r31
		}
		UART_tx('$');
 4da:	84 e2       	ldi	r24, 0x24	; 36
 4dc:	8b de       	rcall	.-746    	; 0x1f4 <_Z7UART_txc>
		UART_tx('T');
 4de:	84 e5       	ldi	r24, 0x54	; 84
 4e0:	89 de       	rcall	.-750    	; 0x1f4 <_Z7UART_txc>
		uart_send_report(adr, val, corrected_val);
 4e2:	45 a1       	lds	r20, 0x45	; 0x800045 <corrected_val>
 4e4:	66 a1       	lds	r22, 0x46	; 0x800046 <val>
 4e6:	87 a1       	lds	r24, 0x47	; 0x800047 <adr>
 4e8:	90 de       	rcall	.-736    	; 0x20a <_Z16uart_send_reporthhh>
	}
	return A;
 4ea:	e2 2f       	mov	r30, r18
 4ec:	f3 2f       	mov	r31, r19
 4ee:	80 81       	ld	r24, Z
};
 4f0:	df 91       	pop	r29
 4f2:	cf 91       	pop	r28
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	08 95       	ret

000004fa <_Z3TMRR15tripple_uint8_t>:
uint8_t TMR(tripple_uint8_t &A)
{
	return TMR(A.A, A.B, A.C);
 4fa:	48 2f       	mov	r20, r24
 4fc:	59 2f       	mov	r21, r25
 4fe:	4e 5f       	subi	r20, 0xFE	; 254
 500:	5f 4f       	sbci	r21, 0xFF	; 255
 502:	68 2f       	mov	r22, r24
 504:	79 2f       	mov	r23, r25
 506:	6f 5f       	subi	r22, 0xFF	; 255
 508:	7f 4f       	sbci	r23, 0xFF	; 255
 50a:	b7 cf       	rjmp	.-146    	; 0x47a <_Z3TMRRhS_S_>

0000050c <_Z11test_memoryv>:
	return 0;
}

void test_memory()
{
	i.A = 0;
 50c:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
	i.B = 0;
 50e:	11 a9       	sts	0x41, r17	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
	i.C = 0;
 510:	12 a9       	sts	0x42, r17	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
	for (i.A = 0; TMR(i) < nr_zells; i.A++, i.B++, i.C++)
 512:	80 e4       	ldi	r24, 0x40	; 64
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	f1 df       	rcall	.-30     	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 518:	82 33       	cpi	r24, 0x32	; 50
 51a:	08 f0       	brcs	.+2      	; 0x51e <_Z11test_memoryv+0x12>
 51c:	42 c0       	rjmp	.+132    	; 0x5a2 <_Z11test_memoryv+0x96>
	{
		if (test[TMR(i)] != TEST_PATTERN)
 51e:	80 e4       	ldi	r24, 0x40	; 64
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	eb df       	rcall	.-42     	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	e8 2f       	mov	r30, r24
 528:	f9 2f       	mov	r31, r25
 52a:	e8 5b       	subi	r30, 0xB8	; 184
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	40 81       	ld	r20, Z
 530:	4a 3a       	cpi	r20, 0xAA	; 170
 532:	69 f1       	breq	.+90     	; 0x58e <_Z11test_memoryv+0x82>
		{
			adr = (uint8_t)(short)&test[TMR(i)];
 534:	80 e4       	ldi	r24, 0x40	; 64
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	e0 df       	rcall	.-64     	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	88 5b       	subi	r24, 0xB8	; 184
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	87 a9       	sts	0x47, r24	; 0x800047 <adr>
			val = test[TMR(i)];
 542:	80 e4       	ldi	r24, 0x40	; 64
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	d9 df       	rcall	.-78     	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	e8 2f       	mov	r30, r24
 54c:	f9 2f       	mov	r31, r25
 54e:	e8 5b       	subi	r30, 0xB8	; 184
 550:	ff 4f       	sbci	r31, 0xFF	; 255
 552:	40 81       	ld	r20, Z
 554:	46 a9       	sts	0x46, r20	; 0x800046 <val>
			test[TMR(i)] = TEST_PATTERN;
 556:	80 e4       	ldi	r24, 0x40	; 64
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	cf df       	rcall	.-98     	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	e8 2f       	mov	r30, r24
 560:	f9 2f       	mov	r31, r25
 562:	e8 5b       	subi	r30, 0xB8	; 184
 564:	ff 4f       	sbci	r31, 0xFF	; 255
 566:	4a ea       	ldi	r20, 0xAA	; 170
 568:	40 83       	st	Z, r20
			corrected_val = test[TMR(i)];
 56a:	80 e4       	ldi	r24, 0x40	; 64
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	c5 df       	rcall	.-118    	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	e8 2f       	mov	r30, r24
 574:	f9 2f       	mov	r31, r25
 576:	e8 5b       	subi	r30, 0xB8	; 184
 578:	ff 4f       	sbci	r31, 0xFF	; 255
 57a:	40 81       	ld	r20, Z
 57c:	45 a9       	sts	0x45, r20	; 0x800045 <corrected_val>
			UART_tx('$');
 57e:	84 e2       	ldi	r24, 0x24	; 36
 580:	39 de       	rcall	.-910    	; 0x1f4 <_Z7UART_txc>
			UART_tx('R');
 582:	82 e5       	ldi	r24, 0x52	; 82
 584:	37 de       	rcall	.-914    	; 0x1f4 <_Z7UART_txc>
			uart_send_report(adr, val, corrected_val);
 586:	45 a1       	lds	r20, 0x45	; 0x800045 <corrected_val>
 588:	66 a1       	lds	r22, 0x46	; 0x800046 <val>
 58a:	87 a1       	lds	r24, 0x47	; 0x800047 <adr>
 58c:	3e de       	rcall	.-900    	; 0x20a <_Z16uart_send_reporthhh>
void test_memory()
{
	i.A = 0;
	i.B = 0;
	i.C = 0;
	for (i.A = 0; TMR(i) < nr_zells; i.A++, i.B++, i.C++)
 58e:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 590:	4f 5f       	subi	r20, 0xFF	; 255
 592:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
 594:	41 a1       	lds	r20, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 596:	4f 5f       	subi	r20, 0xFF	; 255
 598:	41 a9       	sts	0x41, r20	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 59a:	42 a1       	lds	r20, 0x42	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	42 a9       	sts	0x42, r20	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
 5a0:	b8 cf       	rjmp	.-144    	; 0x512 <_Z11test_memoryv+0x6>
 5a2:	08 95       	ret

000005a4 <main>:
// 	return A.A;
// };

int main(void)
{
	CCP = 0xD8;	  // disable Configuration Change Protection Register
 5a4:	48 ed       	ldi	r20, 0xD8	; 216
 5a6:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0x0; // Clock Division Factor = 1			//vielleicht doch durch 8
 5a8:	16 bf       	out	0x36, r17	; 54
	UART_init();
 5aa:	28 de       	rcall	.-944    	; 0x1fc <_Z9UART_initv>
	DDRA |= 1 << PA5; /* set PA5 to output (LED)*/
 5ac:	0d 9a       	sbi	0x01, 5	; 1
	i.A = 0;
 5ae:	10 a9       	sts	0x40, r17	; 0x800040 <__DATA_REGION_ORIGIN__>
	i.B = 0;
 5b0:	11 a9       	sts	0x41, r17	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
	i.C = 0;
 5b2:	12 a9       	sts	0x42, r17	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
	for (i.A = 0; TMR(i) < nr_zells; i.A++, i.B++, i.C++)
 5b4:	80 e4       	ldi	r24, 0x40	; 64
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a0 df       	rcall	.-192    	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 5ba:	82 33       	cpi	r24, 0x32	; 50
 5bc:	00 f5       	brcc	.+64     	; 0x5fe <main+0x5a>
	{
		test[TMR(i)] = TEST_PATTERN;
 5be:	80 e4       	ldi	r24, 0x40	; 64
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	9b df       	rcall	.-202    	; 0x4fa <_Z3TMRR15tripple_uint8_t>
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	e8 2f       	mov	r30, r24
 5c8:	f9 2f       	mov	r31, r25
 5ca:	e8 5b       	subi	r30, 0xB8	; 184
 5cc:	ff 4f       	sbci	r31, 0xFF	; 255
 5ce:	4a ea       	ldi	r20, 0xAA	; 170
 5d0:	40 83       	st	Z, r20
	UART_init();
	DDRA |= 1 << PA5; /* set PA5 to output (LED)*/
	i.A = 0;
	i.B = 0;
	i.C = 0;
	for (i.A = 0; TMR(i) < nr_zells; i.A++, i.B++, i.C++)
 5d2:	40 a1       	lds	r20, 0x40	; 0x800040 <__DATA_REGION_ORIGIN__>
 5d4:	4f 5f       	subi	r20, 0xFF	; 255
 5d6:	40 a9       	sts	0x40, r20	; 0x800040 <__DATA_REGION_ORIGIN__>
 5d8:	41 a1       	lds	r20, 0x41	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 5da:	4f 5f       	subi	r20, 0xFF	; 255
 5dc:	41 a9       	sts	0x41, r20	; 0x800041 <__DATA_REGION_ORIGIN__+0x1>
 5de:	42 a1       	lds	r20, 0x42	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
 5e0:	4f 5f       	subi	r20, 0xFF	; 255
 5e2:	42 a9       	sts	0x42, r20	; 0x800042 <__DATA_REGION_ORIGIN__+0x2>
 5e4:	e7 cf       	rjmp	.-50     	; 0x5b4 <main+0x10>
	{
		test_memory();
		test_register();
		if (++counter == 0)
		{
			PORTA ^= 1 << PA5;
 5e6:	52 b1       	in	r21, 0x02	; 2
 5e8:	40 e2       	ldi	r20, 0x20	; 32
 5ea:	45 27       	eor	r20, r21
 5ec:	42 b9       	out	0x02, r20	; 2
			if (++counter_two == 10)
 5ee:	44 a1       	lds	r20, 0x44	; 0x800044 <counter_two>
 5f0:	4f 5f       	subi	r20, 0xFF	; 255
 5f2:	44 a9       	sts	0x44, r20	; 0x800044 <counter_two>
 5f4:	4a 30       	cpi	r20, 0x0A	; 10
 5f6:	19 f4       	brne	.+6      	; 0x5fe <main+0x5a>
			{

				UART_tx((char)('.'));
 5f8:	8e e2       	ldi	r24, 0x2E	; 46
 5fa:	fc dd       	rcall	.-1032   	; 0x1f4 <_Z7UART_txc>
				counter_two = 0;
 5fc:	14 a9       	sts	0x44, r17	; 0x800044 <counter_two>
		test[TMR(i)] = TEST_PATTERN;
	}

	while (1)
	{
		test_memory();
 5fe:	86 df       	rcall	.-244    	; 0x50c <_Z11test_memoryv>
		test_register();
 600:	1c de       	rcall	.-968    	; 0x23a <_Z13test_registerv>
		if (++counter == 0)
 602:	43 a1       	lds	r20, 0x43	; 0x800043 <counter>
 604:	4f 5f       	subi	r20, 0xFF	; 255
 606:	43 a9       	sts	0x43, r20	; 0x800043 <counter>
 608:	41 13       	cpse	r20, r17
 60a:	f9 cf       	rjmp	.-14     	; 0x5fe <main+0x5a>
 60c:	ec cf       	rjmp	.-40     	; 0x5e6 <main+0x42>

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
