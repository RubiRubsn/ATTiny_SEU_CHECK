
ATTiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800040  000007ec  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800046  00800046  00000886  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a69  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d8  00000000  00000000  000013d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f9  00000000  00000000  00001aad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b6  00000000  00000000  0000212c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e9  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002bcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	78 c0       	rjmp	.+240    	; 0x104 <__vector_9>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 27       	eor	r17, r17
  24:	1f bf       	out	0x3f, r17	; 63
  26:	cf eb       	ldi	r28, 0xBF	; 191
  28:	d0 e0       	ldi	r29, 0x00	; 0
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a6 e4       	ldi	r26, 0x46	; 70
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 93       	st	X+, r17

00000038 <.do_clear_bss_start>:
  38:	aa 35       	cpi	r26, 0x5A	; 90
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>

0000003e <__do_copy_data>:
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	a0 e4       	ldi	r26, 0x40	; 64
  42:	b0 e0       	ldi	r27, 0x00	; 0
  44:	ec ee       	ldi	r30, 0xEC	; 236
  46:	f7 e4       	ldi	r31, 0x47	; 71
  48:	02 c0       	rjmp	.+4      	; 0x4e <__SREG__+0xf>
  4a:	31 91       	ld	r19, Z+
  4c:	3d 93       	st	X+, r19
  4e:	a6 34       	cpi	r26, 0x46	; 70
  50:	b2 07       	cpc	r27, r18
  52:	d9 f7       	brne	.-10     	; 0x4a <__SREG__+0xb>
  54:	ad d1       	rcall	.+858    	; 0x3b0 <main>
  56:	c8 c3       	rjmp	.+1936   	; 0x7e8 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <_Z12volatile_TMRv>:
volatile uint16_t tx_shift_reg_b = 0;
volatile uint16_t tx_shift_reg_c = 0;

volatile uint16_t volatile_TMR()
{
   if ((tx_shift_reg_a == tx_shift_reg_b) && (tx_shift_reg_b == tx_shift_reg_c))
  5a:	64 a3       	lds	r22, 0x54	; 0x800054 <tx_shift_reg_a>
  5c:	75 a3       	lds	r23, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
  5e:	42 a3       	lds	r20, 0x52	; 0x800052 <tx_shift_reg_b>
  60:	53 a3       	lds	r21, 0x53	; 0x800053 <tx_shift_reg_b+0x1>
  62:	64 17       	cp	r22, r20
  64:	75 07       	cpc	r23, r21
  66:	39 f4       	brne	.+14     	; 0x76 <_Z12volatile_TMRv+0x1c>
  68:	62 a3       	lds	r22, 0x52	; 0x800052 <tx_shift_reg_b>
  6a:	73 a3       	lds	r23, 0x53	; 0x800053 <tx_shift_reg_b+0x1>
  6c:	40 a3       	lds	r20, 0x50	; 0x800050 <tx_shift_reg_c>
  6e:	51 a3       	lds	r21, 0x51	; 0x800051 <tx_shift_reg_c+0x1>
  70:	64 17       	cp	r22, r20
  72:	75 07       	cpc	r23, r21
  74:	e1 f0       	breq	.+56     	; 0xae <__DATA_REGION_LENGTH__+0x2e>
   {
      return tx_shift_reg_a;
   }
   else
   {
      if (tx_shift_reg_a == tx_shift_reg_b)
  76:	64 a3       	lds	r22, 0x54	; 0x800054 <tx_shift_reg_a>
  78:	75 a3       	lds	r23, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
  7a:	42 a3       	lds	r20, 0x52	; 0x800052 <tx_shift_reg_b>
  7c:	53 a3       	lds	r21, 0x53	; 0x800053 <tx_shift_reg_b+0x1>
  7e:	64 17       	cp	r22, r20
  80:	75 07       	cpc	r23, r21
  82:	29 f4       	brne	.+10     	; 0x8e <__DATA_REGION_LENGTH__+0xe>
      {
         tx_shift_reg_c = tx_shift_reg_a;
  84:	44 a3       	lds	r20, 0x54	; 0x800054 <tx_shift_reg_a>
  86:	55 a3       	lds	r21, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
  88:	51 ab       	sts	0x51, r21	; 0x800051 <tx_shift_reg_c+0x1>
  8a:	40 ab       	sts	0x50, r20	; 0x800050 <tx_shift_reg_c>
  8c:	10 c0       	rjmp	.+32     	; 0xae <__DATA_REGION_LENGTH__+0x2e>
      }
      else if (tx_shift_reg_a == tx_shift_reg_c)
  8e:	64 a3       	lds	r22, 0x54	; 0x800054 <tx_shift_reg_a>
  90:	75 a3       	lds	r23, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
  92:	40 a3       	lds	r20, 0x50	; 0x800050 <tx_shift_reg_c>
  94:	51 a3       	lds	r21, 0x51	; 0x800051 <tx_shift_reg_c+0x1>
  96:	64 17       	cp	r22, r20
  98:	75 07       	cpc	r23, r21
  9a:	29 f4       	brne	.+10     	; 0xa6 <__DATA_REGION_LENGTH__+0x26>
      {
         tx_shift_reg_b = tx_shift_reg_a;
  9c:	44 a3       	lds	r20, 0x54	; 0x800054 <tx_shift_reg_a>
  9e:	55 a3       	lds	r21, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
  a0:	53 ab       	sts	0x53, r21	; 0x800053 <tx_shift_reg_b+0x1>
  a2:	42 ab       	sts	0x52, r20	; 0x800052 <tx_shift_reg_b>
  a4:	04 c0       	rjmp	.+8      	; 0xae <__DATA_REGION_LENGTH__+0x2e>
      }
      else
      {
         tx_shift_reg_a = tx_shift_reg_b;
  a6:	42 a3       	lds	r20, 0x52	; 0x800052 <tx_shift_reg_b>
  a8:	53 a3       	lds	r21, 0x53	; 0x800053 <tx_shift_reg_b+0x1>
  aa:	55 ab       	sts	0x55, r21	; 0x800055 <tx_shift_reg_a+0x1>
  ac:	44 ab       	sts	0x54, r20	; 0x800054 <tx_shift_reg_a>

volatile uint16_t volatile_TMR()
{
   if ((tx_shift_reg_a == tx_shift_reg_b) && (tx_shift_reg_b == tx_shift_reg_c))
   {
      return tx_shift_reg_a;
  ae:	84 a3       	lds	r24, 0x54	; 0x800054 <tx_shift_reg_a>
  b0:	95 a3       	lds	r25, 0x55	; 0x800055 <tx_shift_reg_a+0x1>
      {
         tx_shift_reg_a = tx_shift_reg_b;
      }
   }
   return tx_shift_reg_a;
};
  b2:	08 95       	ret

000000b4 <_Z11set_TMR_valj>:

void set_TMR_val(uint16_t val)
{
   tx_shift_reg_a = val;
  b4:	95 ab       	sts	0x55, r25	; 0x800055 <tx_shift_reg_a+0x1>
  b6:	84 ab       	sts	0x54, r24	; 0x800054 <tx_shift_reg_a>
   tx_shift_reg_b = val;
  b8:	93 ab       	sts	0x53, r25	; 0x800053 <tx_shift_reg_b+0x1>
  ba:	82 ab       	sts	0x52, r24	; 0x800052 <tx_shift_reg_b>
   tx_shift_reg_c = val;
  bc:	91 ab       	sts	0x51, r25	; 0x800051 <tx_shift_reg_c+0x1>
  be:	80 ab       	sts	0x50, r24	; 0x800050 <tx_shift_reg_c>
  c0:	08 95       	ret

000000c2 <_Z7UART_txc>:
}

void UART_tx(char character)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
   uint16_t local_tx_shift_reg = volatile_TMR();
  c6:	c9 df       	rcall	.-110    	; 0x5a <_Z12volatile_TMRv>

   // if sending the previous character is not yet finished, return
   // transmission is finished when tx_shift_reg == 0
   if (local_tx_shift_reg)
  c8:	89 2b       	or	r24, r25
  ca:	49 f4       	brne	.+18     	; 0xde <_Z7UART_txc+0x1c>
   {
      return;
   }

   // fill the TX shift register witch the character to be sent and the start & stop bits (start bit (1<<0) is already 0)
   local_tx_shift_reg = volatile_TMR();
  cc:	c6 df       	rcall	.-116    	; 0x5a <_Z12volatile_TMRv>
   local_tx_shift_reg = (character << 1) | (1 << 9); // stop bit (1<<9)
   set_TMR_val(local_tx_shift_reg);
  ce:	8c 2f       	mov	r24, r28
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	92 60       	ori	r25, 0x02	; 2
  d8:	ed df       	rcall	.-38     	; 0xb4 <_Z11set_TMR_valj>

   // start timer0 with a prescaler of 8
   TCCR0B = (1 << CS01);
  da:	42 e0       	ldi	r20, 0x02	; 2
  dc:	48 bb       	out	0x18, r20	; 24
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <_Z9UART_initv>:
// }

void UART_init()
{
   // set TX pin as output
   TX_DDR |= (1 << TX_DDR_PIN);
  e2:	29 9a       	sbi	0x05, 1	; 5
   TX_PORT |= (1 << TX_PIN);
  e4:	31 9a       	sbi	0x06, 1	; 6

   // set timer0 to CTC mode
   TCCR0A = (1 << WGM01);
  e6:	42 e0       	ldi	r20, 0x02	; 2
  e8:	49 bb       	out	0x19, r20	; 25

   // enable output compare 0 A interrupt
   TIMSK |= (1 << OCF0A);
  ea:	46 b5       	in	r20, 0x26	; 38
  ec:	42 60       	ori	r20, 0x02	; 2
  ee:	46 bd       	out	0x26, r20	; 38
   NOTE: since the internal 8MHz oscillator is not very accurate, this value can be tuned
   to achieve the desired baud rate, so if it doesn't work with the nominal value (103), try
   increasing or decreasing the value by 1 or 2
   */

   OCR0A = 103; // Default == 103
  f0:	47 e6       	ldi	r20, 0x67	; 103
  f2:	46 bb       	out	0x16, r20	; 22

   // enable interrupts
   sei();
  f4:	78 94       	sei
  f6:	08 95       	ret

000000f8 <_Z16uart_send_reporthh>:
}

void uart_send_report(uint8_t address, uint8_t content)
{
  f8:	cf 93       	push	r28
  fa:	c6 2f       	mov	r28, r22
   UART_tx((char)(address));
  fc:	e2 df       	rcall	.-60     	; 0xc2 <_Z7UART_txc>
   UART_tx((char)(content));
  fe:	8c 2f       	mov	r24, r28
}
 100:	cf 91       	pop	r28
}

void uart_send_report(uint8_t address, uint8_t content)
{
   UART_tx((char)(address));
   UART_tx((char)(content));
 102:	df cf       	rjmp	.-66     	; 0xc2 <_Z7UART_txc>

00000104 <__vector_9>:
}

// timer0 compare A match interrupt
ISR(TIM0_COMPA_vect)
{
 104:	1f 93       	push	r17
 106:	0f 93       	push	r16
 108:	0f b7       	in	r16, 0x3f	; 63
 10a:	0f 93       	push	r16
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
   uint16_t local_tx_shift_reg = volatile_TMR();
 122:	9b df       	rcall	.-202    	; 0x5a <_Z12volatile_TMRv>

   if (local_tx_shift_reg & 0x01)
 124:	80 ff       	sbrs	r24, 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_9+0x28>
   {
      TX_PORT |= (1 << TX_PIN);
 128:	31 9a       	sbi	0x06, 1	; 6
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_9+0x2a>
   }
   else
   {
      TX_PORT &= ~(1 << TX_PIN);
 12c:	31 98       	cbi	0x06, 1	; 6
   }

   local_tx_shift_reg = volatile_TMR();
 12e:	95 df       	rcall	.-214    	; 0x5a <_Z12volatile_TMRv>
   local_tx_shift_reg >>= 1;
   set_TMR_val(local_tx_shift_reg);
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	bf df       	rcall	.-130    	; 0xb4 <_Z11set_TMR_valj>
   local_tx_shift_reg = volatile_TMR();
 136:	91 df       	rcall	.-222    	; 0x5a <_Z12volatile_TMRv>
   if (!local_tx_shift_reg)
 138:	89 2b       	or	r24, r25
 13a:	11 f4       	brne	.+4      	; 0x140 <__vector_9+0x3c>
   {
      TCCR0B = 0;
 13c:	18 bb       	out	0x18, r17	; 24
      TCNT0 = 0;
 13e:	17 bb       	out	0x17, r17	; 23
   }
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	7f 91       	pop	r23
 14e:	6f 91       	pop	r22
 150:	5f 91       	pop	r21
 152:	4f 91       	pop	r20
 154:	0f 91       	pop	r16
 156:	0f bf       	out	0x3f, r16	; 63
 158:	0f 91       	pop	r16
 15a:	1f 91       	pop	r17
 15c:	18 95       	reti

0000015e <_Z3TMRRhS_S_>:
tripple_uint8_t_ptr ram_pointer;
unsigned short ram_size;
void test_memory(unsigned short test_pattern);

uint8_t TMR(uint8_t &A, uint8_t &B, uint8_t &C)
{
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	e8 2f       	mov	r30, r24
 16c:	f9 2f       	mov	r31, r25
 16e:	26 2f       	mov	r18, r22
 170:	37 2f       	mov	r19, r23
	if ((A == B) && (B == C))
 172:	60 81       	ld	r22, Z
 174:	a2 2f       	mov	r26, r18
 176:	b3 2f       	mov	r27, r19
 178:	7c 91       	ld	r23, X
 17a:	a4 2f       	mov	r26, r20
 17c:	b5 2f       	mov	r27, r21
 17e:	8c 91       	ld	r24, X
 180:	67 13       	cpse	r22, r23
 182:	08 c0       	rjmp	.+16     	; 0x194 <_Z3TMRRhS_S_+0x36>
 184:	68 17       	cp	r22, r24
 186:	f9 f0       	breq	.+62     	; 0x1c6 <_Z3TMRRhS_S_+0x68>
	{

		if (A == B)
		{
			//uart_send_report((uint8_t)(short)&C, C);
			adr = (uint8_t)(short)&C;
 188:	4f a9       	sts	0x4f, r20	; 0x80004f <adr>
			val = C;
 18a:	6c 91       	ld	r22, X
 18c:	6e a9       	sts	0x4e, r22	; 0x80004e <val>
			C = A;
 18e:	60 81       	ld	r22, Z
 190:	6c 93       	st	X, r22
 192:	11 c0       	rjmp	.+34     	; 0x1b6 <_Z3TMRRhS_S_+0x58>
		}
		else if (A == C)
 194:	68 13       	cpse	r22, r24
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <_Z3TMRRhS_S_+0x4a>
		{
			//uart_send_report((uint8_t)(short)&B, B);
			adr = (uint8_t)(short)&B;
 198:	2f a9       	sts	0x4f, r18	; 0x80004f <adr>
			val = B;
 19a:	a2 2f       	mov	r26, r18
 19c:	b3 2f       	mov	r27, r19
 19e:	4c 91       	ld	r20, X
 1a0:	4e a9       	sts	0x4e, r20	; 0x80004e <val>
			B = A;
 1a2:	40 81       	ld	r20, Z
 1a4:	4c 93       	st	X, r20
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <_Z3TMRRhS_S_+0x58>
		}
		else
		{
			//uart_send_report((uint8_t)(short)&A, A);
			adr = (uint8_t)(short)&A;
 1a8:	ef a9       	sts	0x4f, r30	; 0x80004f <adr>
			val = A;
 1aa:	40 81       	ld	r20, Z
 1ac:	4e a9       	sts	0x4e, r20	; 0x80004e <val>
			A = B;
 1ae:	a2 2f       	mov	r26, r18
 1b0:	b3 2f       	mov	r27, r19
 1b2:	4c 91       	ld	r20, X
 1b4:	40 83       	st	Z, r20
 1b6:	2e 2f       	mov	r18, r30
 1b8:	3f 2f       	mov	r19, r31
		}
		uart_send_report(adr, val);
 1ba:	6e a1       	lds	r22, 0x4e	; 0x80004e <val>
 1bc:	8f a1       	lds	r24, 0x4f	; 0x80004f <adr>
 1be:	9c df       	rcall	.-200    	; 0xf8 <_Z16uart_send_reporthh>
	}
	return A;
 1c0:	e2 2f       	mov	r30, r18
 1c2:	f3 2f       	mov	r31, r19
 1c4:	80 81       	ld	r24, Z
};
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	08 95       	ret

000001d0 <_Z3TMRR15tripple_uint8_t>:
uint8_t TMR(tripple_uint8_t &A)
{
	return TMR(A.A, A.B, A.C);
 1d0:	48 2f       	mov	r20, r24
 1d2:	59 2f       	mov	r21, r25
 1d4:	4e 5f       	subi	r20, 0xFE	; 254
 1d6:	5f 4f       	sbci	r21, 0xFF	; 255
 1d8:	68 2f       	mov	r22, r24
 1da:	79 2f       	mov	r23, r25
 1dc:	6f 5f       	subi	r22, 0xFF	; 255
 1de:	7f 4f       	sbci	r23, 0xFF	; 255
 1e0:	be cf       	rjmp	.-132    	; 0x15e <_Z3TMRRhS_S_>

000001e2 <_Z3TMRR19tripple_uint8_t_ptr>:
};

uint8_t *TMR(tripple_uint8_t_ptr &A)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	e8 2f       	mov	r30, r24
 1e8:	f9 2f       	mov	r31, r25
	if ((A.A == A.B) && (A.B == A.C))
 1ea:	61 91       	ld	r22, Z+
 1ec:	70 81       	ld	r23, Z
 1ee:	e1 50       	subi	r30, 0x01	; 1
 1f0:	f0 40       	sbci	r31, 0x00	; 0
 1f2:	ee 5f       	subi	r30, 0xFE	; 254
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	41 91       	ld	r20, Z+
 1f8:	50 81       	ld	r21, Z
 1fa:	e3 50       	subi	r30, 0x03	; 3
 1fc:	f0 40       	sbci	r31, 0x00	; 0
 1fe:	ec 5f       	subi	r30, 0xFC	; 252
 200:	ff 4f       	sbci	r31, 0xFF	; 255
 202:	a1 91       	ld	r26, Z+
 204:	b0 81       	ld	r27, Z
 206:	e5 50       	subi	r30, 0x05	; 5
 208:	f0 40       	sbci	r31, 0x00	; 0
 20a:	64 17       	cp	r22, r20
 20c:	75 07       	cpc	r23, r21
 20e:	91 f4       	brne	.+36     	; 0x234 <_Z3TMRR19tripple_uint8_t_ptr+0x52>
 210:	8a 2f       	mov	r24, r26
 212:	9b 2f       	mov	r25, r27
 214:	6a 17       	cp	r22, r26
 216:	7b 07       	cpc	r23, r27
 218:	51 f1       	breq	.+84     	; 0x26e <_Z3TMRR19tripple_uint8_t_ptr+0x8c>
	}
	else
	{
		if (A.A == A.B)
		{
			adr = (uint8_t)(short)&(A.C);
 21a:	4e 2f       	mov	r20, r30
 21c:	5f 2f       	mov	r21, r31
 21e:	4c 5f       	subi	r20, 0xFC	; 252
 220:	5f 4f       	sbci	r21, 0xFF	; 255
 222:	4f a9       	sts	0x4f, r20	; 0x80004f <adr>
			val = (uint8_t)(short)(A.C);
 224:	ae a9       	sts	0x4e, r26	; 0x80004e <val>
			//uart_send_report((short)&A.C, A.C);
			A.C = A.A;
 226:	eb 5f       	subi	r30, 0xFB	; 251
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	70 83       	st	Z, r23
 22c:	62 93       	st	-Z, r22
 22e:	e4 50       	subi	r30, 0x04	; 4
 230:	f0 40       	sbci	r31, 0x00	; 0
 232:	14 c0       	rjmp	.+40     	; 0x25c <_Z3TMRR19tripple_uint8_t_ptr+0x7a>
		}
		else if (A.A == A.C)
 234:	6a 17       	cp	r22, r26
 236:	7b 07       	cpc	r23, r27
 238:	59 f4       	brne	.+22     	; 0x250 <_Z3TMRR19tripple_uint8_t_ptr+0x6e>
		{
			adr = (uint8_t)(short)&(A.B);
 23a:	8e 5f       	subi	r24, 0xFE	; 254
 23c:	9f 4f       	sbci	r25, 0xFF	; 255
 23e:	8f a9       	sts	0x4f, r24	; 0x80004f <adr>
			val = (uint8_t)(short)(A.B);
 240:	4e a9       	sts	0x4e, r20	; 0x80004e <val>
			//uart_send_report((short)&A.B, A.B);
			A.B = A.A;
 242:	ed 5f       	subi	r30, 0xFD	; 253
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	70 83       	st	Z, r23
 248:	62 93       	st	-Z, r22
 24a:	e2 50       	subi	r30, 0x02	; 2
 24c:	f0 40       	sbci	r31, 0x00	; 0
 24e:	06 c0       	rjmp	.+12     	; 0x25c <_Z3TMRR19tripple_uint8_t_ptr+0x7a>
		}
		else
		{
			//uart_send_report((short)&A.A, A.A);
			adr = (uint8_t)(short)&(A.A);
 250:	8f a9       	sts	0x4f, r24	; 0x80004f <adr>
			val = (uint8_t)(short)(A.A);
 252:	6e a9       	sts	0x4e, r22	; 0x80004e <val>
			A.A = A.B;
 254:	ef 5f       	subi	r30, 0xFF	; 255
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	50 83       	st	Z, r21
 25a:	42 93       	st	-Z, r20
 25c:	ce 2f       	mov	r28, r30
 25e:	df 2f       	mov	r29, r31
		}
		uart_send_report(adr, val);
 260:	6e a1       	lds	r22, 0x4e	; 0x80004e <val>
 262:	8f a1       	lds	r24, 0x4f	; 0x80004f <adr>
 264:	49 df       	rcall	.-366    	; 0xf8 <_Z16uart_send_reporthh>
	}
	return A.A;
 266:	88 81       	ld	r24, Y
 268:	cf 5f       	subi	r28, 0xFF	; 255
 26a:	df 4f       	sbci	r29, 0xFF	; 255
 26c:	98 81       	ld	r25, Y
};
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <_Z12allocate_ramPt>:

	return 0;
}

uint8_t *allocate_ram(unsigned short *out_size)
{
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	c8 2f       	mov	r28, r24
 27e:	d9 2f       	mov	r29, r25
	unsigned short i = FLASH_START - RAM_START;
 280:	20 e8       	ldi	r18, 0x80	; 128
 282:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t *memory;
	while ((memory = (uint8_t *)malloc(--i)) == 0x00 && i > 0) //i muss TMR -----------------------------------------------------------
 284:	21 50       	subi	r18, 0x01	; 1
 286:	31 0b       	sbc	r19, r17
 288:	82 2f       	mov	r24, r18
 28a:	93 2f       	mov	r25, r19
 28c:	f3 d0       	rcall	.+486    	; 0x474 <malloc>
 28e:	81 17       	cp	r24, r17
 290:	91 07       	cpc	r25, r17
 292:	39 f0       	breq	.+14     	; 0x2a2 <_Z12allocate_ramPt+0x2e>
		;
	*out_size = i;
 294:	29 93       	st	Y+, r18
 296:	38 83       	st	Y, r19
	return memory;
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	08 95       	ret

uint8_t *allocate_ram(unsigned short *out_size)
{
	unsigned short i = FLASH_START - RAM_START;
	uint8_t *memory;
	while ((memory = (uint8_t *)malloc(--i)) == 0x00 && i > 0) //i muss TMR -----------------------------------------------------------
 2a2:	21 17       	cp	r18, r17
 2a4:	31 07       	cpc	r19, r17
 2a6:	71 f7       	brne	.-36     	; 0x284 <_Z12allocate_ramPt+0x10>
 2a8:	f5 cf       	rjmp	.-22     	; 0x294 <_Z12allocate_ramPt+0x20>

000002aa <_Z11test_memoryt>:
	*out_size = i;
	return memory;
}

void test_memory(unsigned short test_pattern)
{
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <_Z11test_memoryt+0xa>
 2b4:	00 d0       	rcall	.+0      	; 0x2b6 <_Z11test_memoryt+0xc>
 2b6:	1f 93       	push	r17
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
 2bc:	cb 5f       	subi	r28, 0xFB	; 251
 2be:	df 4f       	sbci	r29, 0xFF	; 255
 2c0:	98 83       	st	Y, r25
 2c2:	8a 93       	st	-Y, r24
 2c4:	c4 50       	subi	r28, 0x04	; 4
 2c6:	d0 40       	sbci	r29, 0x00	; 0
	for (tripple_uint8_t i = {0, 0, 0}; TMR(i) < ram_size; i.A++, i.B++, i.C++)
 2c8:	cf 5f       	subi	r28, 0xFF	; 255
 2ca:	df 4f       	sbci	r29, 0xFF	; 255
 2cc:	18 83       	st	Y, r17
 2ce:	c1 50       	subi	r28, 0x01	; 1
 2d0:	d0 40       	sbci	r29, 0x00	; 0
 2d2:	ce 5f       	subi	r28, 0xFE	; 254
 2d4:	df 4f       	sbci	r29, 0xFF	; 255
 2d6:	18 83       	st	Y, r17
 2d8:	c2 50       	subi	r28, 0x02	; 2
 2da:	d0 40       	sbci	r29, 0x00	; 0
 2dc:	cd 5f       	subi	r28, 0xFD	; 253
 2de:	df 4f       	sbci	r29, 0xFF	; 255
 2e0:	18 83       	st	Y, r17
 2e2:	c3 50       	subi	r28, 0x03	; 3
 2e4:	d0 40       	sbci	r29, 0x00	; 0
 2e6:	8c 2f       	mov	r24, r28
 2e8:	9d 2f       	mov	r25, r29
 2ea:	8f 5f       	subi	r24, 0xFF	; 255
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	70 df       	rcall	.-288    	; 0x1d0 <_Z3TMRR15tripple_uint8_t>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	46 a1       	lds	r20, 0x46	; 0x800046 <__data_end>
 2f4:	57 a1       	lds	r21, 0x47	; 0x800047 <__data_end+0x1>
 2f6:	84 17       	cp	r24, r20
 2f8:	95 07       	cpc	r25, r21
 2fa:	08 f0       	brcs	.+2      	; 0x2fe <_Z11test_memoryt+0x54>
 2fc:	4f c0       	rjmp	.+158    	; 0x39c <_Z11test_memoryt+0xf2>
	{

		//uint8_t *help = TMR(ram_pointer);
		uint8_t *ram_help = TMR(ram_pointer);
 2fe:	88 e4       	ldi	r24, 0x48	; 72
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	6f df       	rcall	.-290    	; 0x1e2 <_Z3TMRR19tripple_uint8_t_ptr>
 304:	28 2f       	mov	r18, r24
 306:	39 2f       	mov	r19, r25
		if (*(ram_help + i.A) != test_pattern) //i is TMR checked one line ahead -- size optimisation
 308:	cf 5f       	subi	r28, 0xFF	; 255
 30a:	df 4f       	sbci	r29, 0xFF	; 255
 30c:	88 81       	ld	r24, Y
 30e:	c1 50       	subi	r28, 0x01	; 1
 310:	d0 40       	sbci	r29, 0x00	; 0
 312:	e2 2f       	mov	r30, r18
 314:	f3 2f       	mov	r31, r19
 316:	e8 0f       	add	r30, r24
 318:	f1 1f       	adc	r31, r17
 31a:	40 81       	ld	r20, Z
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	cc 5f       	subi	r28, 0xFC	; 252
 320:	df 4f       	sbci	r29, 0xFF	; 255
 322:	69 91       	ld	r22, Y+
 324:	78 81       	ld	r23, Y
 326:	c5 50       	subi	r28, 0x05	; 5
 328:	d0 40       	sbci	r29, 0x00	; 0
 32a:	46 17       	cp	r20, r22
 32c:	57 07       	cpc	r21, r23
 32e:	a1 f0       	breq	.+40     	; 0x358 <_Z11test_memoryt+0xae>
		{

			// adr = (uint8_t)(short)TMR(ram_pointer) + TMR(i);
			// val = *(TMR(ram_pointer) + TMR(i));
			adr = (uint8_t)(short)ram_help + i.A;
 330:	82 0f       	add	r24, r18
 332:	8f a9       	sts	0x4f, r24	; 0x80004f <adr>
			val = *(ram_help + i.A);
 334:	60 81       	ld	r22, Z
 336:	6e a9       	sts	0x4e, r22	; 0x80004e <val>
			uart_send_report(adr, val);
 338:	df de       	rcall	.-578    	; 0xf8 <_Z16uart_send_reporthh>
			*(ram_help + TMR(i)) = test_pattern;
 33a:	8c 2f       	mov	r24, r28
 33c:	9d 2f       	mov	r25, r29
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
 342:	46 df       	rcall	.-372    	; 0x1d0 <_Z3TMRR15tripple_uint8_t>
 344:	e2 2f       	mov	r30, r18
 346:	f3 2f       	mov	r31, r19
 348:	e8 0f       	add	r30, r24
 34a:	f1 1f       	adc	r31, r17
 34c:	cc 5f       	subi	r28, 0xFC	; 252
 34e:	df 4f       	sbci	r29, 0xFF	; 255
 350:	78 81       	ld	r23, Y
 352:	c4 50       	subi	r28, 0x04	; 4
 354:	d0 40       	sbci	r29, 0x00	; 0
 356:	70 83       	st	Z, r23
	return memory;
}

void test_memory(unsigned short test_pattern)
{
	for (tripple_uint8_t i = {0, 0, 0}; TMR(i) < ram_size; i.A++, i.B++, i.C++)
 358:	cf 5f       	subi	r28, 0xFF	; 255
 35a:	df 4f       	sbci	r29, 0xFF	; 255
 35c:	48 81       	ld	r20, Y
 35e:	c1 50       	subi	r28, 0x01	; 1
 360:	d0 40       	sbci	r29, 0x00	; 0
 362:	4f 5f       	subi	r20, 0xFF	; 255
 364:	cf 5f       	subi	r28, 0xFF	; 255
 366:	df 4f       	sbci	r29, 0xFF	; 255
 368:	48 83       	st	Y, r20
 36a:	c1 50       	subi	r28, 0x01	; 1
 36c:	d0 40       	sbci	r29, 0x00	; 0
 36e:	ce 5f       	subi	r28, 0xFE	; 254
 370:	df 4f       	sbci	r29, 0xFF	; 255
 372:	48 81       	ld	r20, Y
 374:	c2 50       	subi	r28, 0x02	; 2
 376:	d0 40       	sbci	r29, 0x00	; 0
 378:	4f 5f       	subi	r20, 0xFF	; 255
 37a:	ce 5f       	subi	r28, 0xFE	; 254
 37c:	df 4f       	sbci	r29, 0xFF	; 255
 37e:	48 83       	st	Y, r20
 380:	c2 50       	subi	r28, 0x02	; 2
 382:	d0 40       	sbci	r29, 0x00	; 0
 384:	cd 5f       	subi	r28, 0xFD	; 253
 386:	df 4f       	sbci	r29, 0xFF	; 255
 388:	48 81       	ld	r20, Y
 38a:	c3 50       	subi	r28, 0x03	; 3
 38c:	d0 40       	sbci	r29, 0x00	; 0
 38e:	4f 5f       	subi	r20, 0xFF	; 255
 390:	cd 5f       	subi	r28, 0xFD	; 253
 392:	df 4f       	sbci	r29, 0xFF	; 255
 394:	48 83       	st	Y, r20
 396:	c3 50       	subi	r28, 0x03	; 3
 398:	d0 40       	sbci	r29, 0x00	; 0
 39a:	a5 cf       	rjmp	.-182    	; 0x2e6 <_Z11test_memoryt+0x3c>
			val = *(ram_help + i.A);
			uart_send_report(adr, val);
			*(ram_help + TMR(i)) = test_pattern;
		}
	}
}
 39c:	0f 91       	pop	r16
 39e:	0f 91       	pop	r16
 3a0:	0f 91       	pop	r16
 3a2:	0f 91       	pop	r16
 3a4:	0f 91       	pop	r16
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	08 95       	ret

000003b0 <main>:
	}
	return A.A;
};

int main(void)
{
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	00 d0       	rcall	.+0      	; 0x3b6 <main+0x6>
 3b6:	1f 93       	push	r17
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62

	CCP = 0xD8;	  // disable Configuration Change Protection Register
 3bc:	48 ed       	ldi	r20, 0xD8	; 216
 3be:	4c bf       	out	0x3c, r20	; 60
	CLKPSR = 0x0; // Clock Division Factor = 1			//vielleicht doch durch 8
 3c0:	16 bf       	out	0x36, r17	; 54
	UART_init();
 3c2:	8f de       	rcall	.-738    	; 0xe2 <_Z9UART_initv>
	DDRA |= 1 << PA5; /* set PA5 to output (LED)*/
 3c4:	0d 9a       	sbi	0x01, 5	; 1

	ram_pointer.A = allocate_ram(&ram_size);
 3c6:	86 e4       	ldi	r24, 0x46	; 70
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	54 df       	rcall	.-344    	; 0x274 <_Z12allocate_ramPt>
 3cc:	99 a9       	sts	0x49, r25	; 0x800049 <ram_pointer+0x1>
 3ce:	88 a9       	sts	0x48, r24	; 0x800048 <ram_pointer>
	ram_pointer.B = ram_pointer.A;
 3d0:	9b a9       	sts	0x4b, r25	; 0x80004b <ram_pointer+0x3>
 3d2:	8a a9       	sts	0x4a, r24	; 0x80004a <ram_pointer+0x2>
	ram_pointer.C = ram_pointer.A;
 3d4:	9d a9       	sts	0x4d, r25	; 0x80004d <ram_pointer+0x5>
 3d6:	8c a9       	sts	0x4c, r24	; 0x80004c <ram_pointer+0x4>

	for (tripple_uint8_t i = {0, 0, 0}; TMR(i) < ram_size; i.A++, i.B++, i.C++)
 3d8:	cf 5f       	subi	r28, 0xFF	; 255
 3da:	df 4f       	sbci	r29, 0xFF	; 255
 3dc:	18 83       	st	Y, r17
 3de:	c1 50       	subi	r28, 0x01	; 1
 3e0:	d0 40       	sbci	r29, 0x00	; 0
 3e2:	ce 5f       	subi	r28, 0xFE	; 254
 3e4:	df 4f       	sbci	r29, 0xFF	; 255
 3e6:	18 83       	st	Y, r17
 3e8:	c2 50       	subi	r28, 0x02	; 2
 3ea:	d0 40       	sbci	r29, 0x00	; 0
 3ec:	cd 5f       	subi	r28, 0xFD	; 253
 3ee:	df 4f       	sbci	r29, 0xFF	; 255
 3f0:	18 83       	st	Y, r17
 3f2:	c3 50       	subi	r28, 0x03	; 3
 3f4:	d0 40       	sbci	r29, 0x00	; 0
 3f6:	8c 2f       	mov	r24, r28
 3f8:	9d 2f       	mov	r25, r29
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
 3fe:	e8 de       	rcall	.-560    	; 0x1d0 <_Z3TMRR15tripple_uint8_t>
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	46 a1       	lds	r20, 0x46	; 0x800046 <__data_end>
 404:	57 a1       	lds	r21, 0x47	; 0x800047 <__data_end+0x1>
 406:	84 17       	cp	r24, r20
 408:	95 07       	cpc	r25, r21
 40a:	80 f5       	brcc	.+96     	; 0x46c <main+0xbc>
	{

		*(TMR(ram_pointer) + i.A) = TEST_PATTERN; //size optimisations i is tmr checked one line ahead
 40c:	88 e4       	ldi	r24, 0x48	; 72
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	e8 de       	rcall	.-560    	; 0x1e2 <_Z3TMRR19tripple_uint8_t_ptr>
 412:	cf 5f       	subi	r28, 0xFF	; 255
 414:	df 4f       	sbci	r29, 0xFF	; 255
 416:	48 81       	ld	r20, Y
 418:	c1 50       	subi	r28, 0x01	; 1
 41a:	d0 40       	sbci	r29, 0x00	; 0
 41c:	e8 2f       	mov	r30, r24
 41e:	f9 2f       	mov	r31, r25
 420:	e4 0f       	add	r30, r20
 422:	f1 1f       	adc	r31, r17
 424:	4a ea       	ldi	r20, 0xAA	; 170
 426:	40 83       	st	Z, r20

	ram_pointer.A = allocate_ram(&ram_size);
	ram_pointer.B = ram_pointer.A;
	ram_pointer.C = ram_pointer.A;

	for (tripple_uint8_t i = {0, 0, 0}; TMR(i) < ram_size; i.A++, i.B++, i.C++)
 428:	cf 5f       	subi	r28, 0xFF	; 255
 42a:	df 4f       	sbci	r29, 0xFF	; 255
 42c:	48 81       	ld	r20, Y
 42e:	c1 50       	subi	r28, 0x01	; 1
 430:	d0 40       	sbci	r29, 0x00	; 0
 432:	4f 5f       	subi	r20, 0xFF	; 255
 434:	cf 5f       	subi	r28, 0xFF	; 255
 436:	df 4f       	sbci	r29, 0xFF	; 255
 438:	48 83       	st	Y, r20
 43a:	c1 50       	subi	r28, 0x01	; 1
 43c:	d0 40       	sbci	r29, 0x00	; 0
 43e:	ce 5f       	subi	r28, 0xFE	; 254
 440:	df 4f       	sbci	r29, 0xFF	; 255
 442:	48 81       	ld	r20, Y
 444:	c2 50       	subi	r28, 0x02	; 2
 446:	d0 40       	sbci	r29, 0x00	; 0
 448:	4f 5f       	subi	r20, 0xFF	; 255
 44a:	ce 5f       	subi	r28, 0xFE	; 254
 44c:	df 4f       	sbci	r29, 0xFF	; 255
 44e:	48 83       	st	Y, r20
 450:	c2 50       	subi	r28, 0x02	; 2
 452:	d0 40       	sbci	r29, 0x00	; 0
 454:	cd 5f       	subi	r28, 0xFD	; 253
 456:	df 4f       	sbci	r29, 0xFF	; 255
 458:	48 81       	ld	r20, Y
 45a:	c3 50       	subi	r28, 0x03	; 3
 45c:	d0 40       	sbci	r29, 0x00	; 0
 45e:	4f 5f       	subi	r20, 0xFF	; 255
 460:	cd 5f       	subi	r28, 0xFD	; 253
 462:	df 4f       	sbci	r29, 0xFF	; 255
 464:	48 83       	st	Y, r20
 466:	c3 50       	subi	r28, 0x03	; 3
 468:	d0 40       	sbci	r29, 0x00	; 0
 46a:	c5 cf       	rjmp	.-118    	; 0x3f6 <main+0x46>
		*(TMR(ram_pointer) + i.A) = TEST_PATTERN; //size optimisations i is tmr checked one line ahead
	}

	while (1)
	{
		test_memory(TEST_PATTERN);
 46c:	8a ea       	ldi	r24, 0xAA	; 170
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	1c df       	rcall	.-456    	; 0x2aa <_Z11test_memoryt>
 472:	fc cf       	rjmp	.-8      	; 0x46c <main+0xbc>

00000474 <malloc>:
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	00 d0       	rcall	.+0      	; 0x47e <malloc+0xa>
 47e:	00 d0       	rcall	.+0      	; 0x480 <malloc+0xc>
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
 484:	68 2f       	mov	r22, r24
 486:	79 2f       	mov	r23, r25
 488:	82 30       	cpi	r24, 0x02	; 2
 48a:	91 07       	cpc	r25, r17
 48c:	10 f4       	brcc	.+4      	; 0x492 <malloc+0x1e>
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	70 e0       	ldi	r23, 0x00	; 0
 492:	e8 e5       	ldi	r30, 0x58	; 88
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	01 91       	ld	r16, Z+
 498:	f0 81       	ld	r31, Z
 49a:	e0 2f       	mov	r30, r16
 49c:	40 e0       	ldi	r20, 0x00	; 0
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e1 17       	cp	r30, r17
 4a6:	f1 07       	cpc	r31, r17
 4a8:	09 f4       	brne	.+2      	; 0x4ac <malloc+0x38>
 4aa:	42 c0       	rjmp	.+132    	; 0x530 <malloc+0xbc>
 4ac:	81 91       	ld	r24, Z+
 4ae:	90 81       	ld	r25, Z
 4b0:	e1 50       	subi	r30, 0x01	; 1
 4b2:	f0 40       	sbci	r31, 0x00	; 0
 4b4:	ee 5f       	subi	r30, 0xFE	; 254
 4b6:	ff 4f       	sbci	r31, 0xFF	; 255
 4b8:	20 81       	ld	r18, Z
 4ba:	e2 50       	subi	r30, 0x02	; 2
 4bc:	f0 40       	sbci	r31, 0x00	; 0
 4be:	ed 5f       	subi	r30, 0xFD	; 253
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	30 81       	ld	r19, Z
 4c4:	e3 50       	subi	r30, 0x03	; 3
 4c6:	f0 40       	sbci	r31, 0x00	; 0
 4c8:	86 17       	cp	r24, r22
 4ca:	97 07       	cpc	r25, r23
 4cc:	60 f1       	brcs	.+88     	; 0x526 <malloc+0xb2>
 4ce:	68 17       	cp	r22, r24
 4d0:	79 07       	cpc	r23, r25
 4d2:	a9 f4       	brne	.+42     	; 0x4fe <malloc+0x8a>
 4d4:	a1 17       	cp	r26, r17
 4d6:	b1 07       	cpc	r27, r17
 4d8:	49 f0       	breq	.+18     	; 0x4ec <malloc+0x78>
 4da:	ae 5f       	subi	r26, 0xFE	; 254
 4dc:	bf 4f       	sbci	r27, 0xFF	; 255
 4de:	2c 93       	st	X, r18
 4e0:	a2 50       	subi	r26, 0x02	; 2
 4e2:	b0 40       	sbci	r27, 0x00	; 0
 4e4:	ad 5f       	subi	r26, 0xFD	; 253
 4e6:	bf 4f       	sbci	r27, 0xFF	; 255
 4e8:	3c 93       	st	X, r19
 4ea:	06 c0       	rjmp	.+12     	; 0x4f8 <malloc+0x84>
 4ec:	a8 e5       	ldi	r26, 0x58	; 88
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	2c 93       	st	X, r18
 4f2:	af 5f       	subi	r26, 0xFF	; 255
 4f4:	bf 4f       	sbci	r27, 0xFF	; 255
 4f6:	3c 93       	st	X, r19
 4f8:	8e 2f       	mov	r24, r30
 4fa:	9f 2f       	mov	r25, r31
 4fc:	46 c0       	rjmp	.+140    	; 0x58a <malloc+0x116>
 4fe:	41 17       	cp	r20, r17
 500:	51 07       	cpc	r21, r17
 502:	19 f0       	breq	.+6      	; 0x50a <malloc+0x96>
 504:	84 17       	cp	r24, r20
 506:	95 07       	cpc	r25, r21
 508:	70 f4       	brcc	.+28     	; 0x526 <malloc+0xb2>
 50a:	48 2f       	mov	r20, r24
 50c:	59 2f       	mov	r21, r25
 50e:	ce 5f       	subi	r28, 0xFE	; 254
 510:	df 4f       	sbci	r29, 0xFF	; 255
 512:	b8 83       	st	Y, r27
 514:	aa 93       	st	-Y, r26
 516:	c1 50       	subi	r28, 0x01	; 1
 518:	d0 40       	sbci	r29, 0x00	; 0
 51a:	cc 5f       	subi	r28, 0xFC	; 252
 51c:	df 4f       	sbci	r29, 0xFF	; 255
 51e:	f8 83       	st	Y, r31
 520:	ea 93       	st	-Y, r30
 522:	c3 50       	subi	r28, 0x03	; 3
 524:	d0 40       	sbci	r29, 0x00	; 0
 526:	ae 2f       	mov	r26, r30
 528:	bf 2f       	mov	r27, r31
 52a:	e2 2f       	mov	r30, r18
 52c:	f3 2f       	mov	r31, r19
 52e:	ba cf       	rjmp	.-140    	; 0x4a4 <malloc+0x30>
 530:	41 17       	cp	r20, r17
 532:	51 07       	cpc	r21, r17
 534:	09 f4       	brne	.+2      	; 0x538 <malloc+0xc4>
 536:	45 c0       	rjmp	.+138    	; 0x5c2 <malloc+0x14e>
 538:	46 1b       	sub	r20, r22
 53a:	57 0b       	sbc	r21, r23
 53c:	44 30       	cpi	r20, 0x04	; 4
 53e:	51 07       	cpc	r21, r17
 540:	38 f5       	brcc	.+78     	; 0x590 <malloc+0x11c>
 542:	cd 5f       	subi	r28, 0xFD	; 253
 544:	df 4f       	sbci	r29, 0xFF	; 255
 546:	e9 91       	ld	r30, Y+
 548:	f8 81       	ld	r31, Y
 54a:	c4 50       	subi	r28, 0x04	; 4
 54c:	d0 40       	sbci	r29, 0x00	; 0
 54e:	ee 5f       	subi	r30, 0xFE	; 254
 550:	ff 4f       	sbci	r31, 0xFF	; 255
 552:	41 91       	ld	r20, Z+
 554:	50 81       	ld	r21, Z
 556:	cf 5f       	subi	r28, 0xFF	; 255
 558:	df 4f       	sbci	r29, 0xFF	; 255
 55a:	69 91       	ld	r22, Y+
 55c:	78 81       	ld	r23, Y
 55e:	c2 50       	subi	r28, 0x02	; 2
 560:	d0 40       	sbci	r29, 0x00	; 0
 562:	61 17       	cp	r22, r17
 564:	71 07       	cpc	r23, r17
 566:	39 f0       	breq	.+14     	; 0x576 <malloc+0x102>
 568:	e6 2f       	mov	r30, r22
 56a:	f7 2f       	mov	r31, r23
 56c:	ed 5f       	subi	r30, 0xFD	; 253
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	50 83       	st	Z, r21
 572:	42 93       	st	-Z, r20
 574:	04 c0       	rjmp	.+8      	; 0x57e <malloc+0x10a>
 576:	e8 e5       	ldi	r30, 0x58	; 88
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	41 93       	st	Z+, r20
 57c:	50 83       	st	Z, r21
 57e:	cd 5f       	subi	r28, 0xFD	; 253
 580:	df 4f       	sbci	r29, 0xFF	; 255
 582:	89 91       	ld	r24, Y+
 584:	98 81       	ld	r25, Y
 586:	c4 50       	subi	r28, 0x04	; 4
 588:	d0 40       	sbci	r29, 0x00	; 0
 58a:	8e 5f       	subi	r24, 0xFE	; 254
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	58 c0       	rjmp	.+176    	; 0x640 <malloc+0x1cc>
 590:	cd 5f       	subi	r28, 0xFD	; 253
 592:	df 4f       	sbci	r29, 0xFF	; 255
 594:	89 91       	ld	r24, Y+
 596:	98 81       	ld	r25, Y
 598:	c4 50       	subi	r28, 0x04	; 4
 59a:	d0 40       	sbci	r29, 0x00	; 0
 59c:	84 0f       	add	r24, r20
 59e:	95 1f       	adc	r25, r21
 5a0:	e8 2f       	mov	r30, r24
 5a2:	f9 2f       	mov	r31, r25
 5a4:	61 93       	st	Z+, r22
 5a6:	71 93       	st	Z+, r23
 5a8:	8e 2f       	mov	r24, r30
 5aa:	9f 2f       	mov	r25, r31
 5ac:	42 50       	subi	r20, 0x02	; 2
 5ae:	51 0b       	sbc	r21, r17
 5b0:	cd 5f       	subi	r28, 0xFD	; 253
 5b2:	df 4f       	sbci	r29, 0xFF	; 255
 5b4:	e9 91       	ld	r30, Y+
 5b6:	f8 81       	ld	r31, Y
 5b8:	c4 50       	subi	r28, 0x04	; 4
 5ba:	d0 40       	sbci	r29, 0x00	; 0
 5bc:	41 93       	st	Z+, r20
 5be:	50 83       	st	Z, r21
 5c0:	3f c0       	rjmp	.+126    	; 0x640 <malloc+0x1cc>
 5c2:	e6 e5       	ldi	r30, 0x56	; 86
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	41 91       	ld	r20, Z+
 5c8:	50 81       	ld	r21, Z
 5ca:	e1 50       	subi	r30, 0x01	; 1
 5cc:	f0 40       	sbci	r31, 0x00	; 0
 5ce:	45 2b       	or	r20, r21
 5d0:	31 f4       	brne	.+12     	; 0x5de <malloc+0x16a>
 5d2:	a2 e4       	ldi	r26, 0x42	; 66
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	4d 91       	ld	r20, X+
 5d8:	5c 91       	ld	r21, X
 5da:	41 93       	st	Z+, r20
 5dc:	50 83       	st	Z, r21
 5de:	e0 e4       	ldi	r30, 0x40	; 64
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	41 91       	ld	r20, Z+
 5e4:	50 81       	ld	r21, Z
 5e6:	41 17       	cp	r20, r17
 5e8:	51 07       	cpc	r21, r17
 5ea:	41 f4       	brne	.+16     	; 0x5fc <malloc+0x188>
 5ec:	4d b7       	in	r20, 0x3d	; 61
 5ee:	5e b7       	in	r21, 0x3e	; 62
 5f0:	e4 e4       	ldi	r30, 0x44	; 68
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	81 91       	ld	r24, Z+
 5f6:	90 81       	ld	r25, Z
 5f8:	48 1b       	sub	r20, r24
 5fa:	59 0b       	sbc	r21, r25
 5fc:	e6 e5       	ldi	r30, 0x56	; 86
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	81 91       	ld	r24, Z+
 602:	90 81       	ld	r25, Z
 604:	e1 50       	subi	r30, 0x01	; 1
 606:	f0 40       	sbci	r31, 0x00	; 0
 608:	84 17       	cp	r24, r20
 60a:	95 07       	cpc	r25, r21
 60c:	b8 f4       	brcc	.+46     	; 0x63c <malloc+0x1c8>
 60e:	48 1b       	sub	r20, r24
 610:	59 0b       	sbc	r21, r25
 612:	46 17       	cp	r20, r22
 614:	57 07       	cpc	r21, r23
 616:	90 f0       	brcs	.+36     	; 0x63c <malloc+0x1c8>
 618:	a6 2f       	mov	r26, r22
 61a:	b7 2f       	mov	r27, r23
 61c:	ae 5f       	subi	r26, 0xFE	; 254
 61e:	bf 4f       	sbci	r27, 0xFF	; 255
 620:	4a 17       	cp	r20, r26
 622:	5b 07       	cpc	r21, r27
 624:	58 f0       	brcs	.+22     	; 0x63c <malloc+0x1c8>
 626:	a8 0f       	add	r26, r24
 628:	b9 1f       	adc	r27, r25
 62a:	a1 93       	st	Z+, r26
 62c:	b0 83       	st	Z, r27
 62e:	e8 2f       	mov	r30, r24
 630:	f9 2f       	mov	r31, r25
 632:	61 93       	st	Z+, r22
 634:	71 93       	st	Z+, r23
 636:	8e 2f       	mov	r24, r30
 638:	9f 2f       	mov	r25, r31
 63a:	02 c0       	rjmp	.+4      	; 0x640 <malloc+0x1cc>
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0f 91       	pop	r16
 642:	0f 91       	pop	r16
 644:	0f 91       	pop	r16
 646:	0f 91       	pop	r16
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	3f 91       	pop	r19
 64e:	2f 91       	pop	r18
 650:	08 95       	ret

00000652 <free>:
 652:	2f 93       	push	r18
 654:	3f 93       	push	r19
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	81 17       	cp	r24, r17
 65c:	91 07       	cpc	r25, r17
 65e:	09 f4       	brne	.+2      	; 0x662 <free+0x10>
 660:	be c0       	rjmp	.+380    	; 0x7de <free+0x18c>
 662:	e8 2f       	mov	r30, r24
 664:	f9 2f       	mov	r31, r25
 666:	e2 50       	subi	r30, 0x02	; 2
 668:	f1 0b       	sbc	r31, r17
 66a:	ed 5f       	subi	r30, 0xFD	; 253
 66c:	ff 4f       	sbci	r31, 0xFF	; 255
 66e:	10 83       	st	Z, r17
 670:	12 93       	st	-Z, r17
 672:	e2 50       	subi	r30, 0x02	; 2
 674:	f0 40       	sbci	r31, 0x00	; 0
 676:	c8 e5       	ldi	r28, 0x58	; 88
 678:	d0 e0       	ldi	r29, 0x00	; 0
 67a:	a9 91       	ld	r26, Y+
 67c:	b8 81       	ld	r27, Y
 67e:	c1 50       	subi	r28, 0x01	; 1
 680:	d0 40       	sbci	r29, 0x00	; 0
 682:	a1 17       	cp	r26, r17
 684:	b1 07       	cpc	r27, r17
 686:	99 f4       	brne	.+38     	; 0x6ae <free+0x5c>
 688:	41 91       	ld	r20, Z+
 68a:	50 81       	ld	r21, Z
 68c:	e1 50       	subi	r30, 0x01	; 1
 68e:	f0 40       	sbci	r31, 0x00	; 0
 690:	84 0f       	add	r24, r20
 692:	95 1f       	adc	r25, r21
 694:	a6 e5       	ldi	r26, 0x56	; 86
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	4d 91       	ld	r20, X+
 69a:	5c 91       	ld	r21, X
 69c:	a1 50       	subi	r26, 0x01	; 1
 69e:	b0 40       	sbci	r27, 0x00	; 0
 6a0:	48 17       	cp	r20, r24
 6a2:	59 07       	cpc	r21, r25
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <free+0x56>
 6a6:	42 c0       	rjmp	.+132    	; 0x72c <free+0xda>
 6a8:	e9 93       	st	Y+, r30
 6aa:	f8 83       	st	Y, r31
 6ac:	98 c0       	rjmp	.+304    	; 0x7de <free+0x18c>
 6ae:	ca 2f       	mov	r28, r26
 6b0:	db 2f       	mov	r29, r27
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	ce 17       	cp	r28, r30
 6b8:	df 07       	cpc	r29, r31
 6ba:	70 f4       	brcc	.+28     	; 0x6d8 <free+0x86>
 6bc:	ce 5f       	subi	r28, 0xFE	; 254
 6be:	df 4f       	sbci	r29, 0xFF	; 255
 6c0:	69 91       	ld	r22, Y+
 6c2:	78 81       	ld	r23, Y
 6c4:	c3 50       	subi	r28, 0x03	; 3
 6c6:	d0 40       	sbci	r29, 0x00	; 0
 6c8:	4c 2f       	mov	r20, r28
 6ca:	5d 2f       	mov	r21, r29
 6cc:	61 17       	cp	r22, r17
 6ce:	71 07       	cpc	r23, r17
 6d0:	81 f1       	breq	.+96     	; 0x732 <free+0xe0>
 6d2:	c6 2f       	mov	r28, r22
 6d4:	d7 2f       	mov	r29, r23
 6d6:	ef cf       	rjmp	.-34     	; 0x6b6 <free+0x64>
 6d8:	ed 5f       	subi	r30, 0xFD	; 253
 6da:	ff 4f       	sbci	r31, 0xFF	; 255
 6dc:	d0 83       	st	Z, r29
 6de:	c2 93       	st	-Z, r28
 6e0:	e2 50       	subi	r30, 0x02	; 2
 6e2:	f0 40       	sbci	r31, 0x00	; 0
 6e4:	21 91       	ld	r18, Z+
 6e6:	30 81       	ld	r19, Z
 6e8:	e1 50       	subi	r30, 0x01	; 1
 6ea:	f0 40       	sbci	r31, 0x00	; 0
 6ec:	82 0f       	add	r24, r18
 6ee:	93 1f       	adc	r25, r19
 6f0:	c8 17       	cp	r28, r24
 6f2:	d9 07       	cpc	r29, r25
 6f4:	b1 f4       	brne	.+44     	; 0x722 <free+0xd0>
 6f6:	69 91       	ld	r22, Y+
 6f8:	78 81       	ld	r23, Y
 6fa:	c1 50       	subi	r28, 0x01	; 1
 6fc:	d0 40       	sbci	r29, 0x00	; 0
 6fe:	62 0f       	add	r22, r18
 700:	73 1f       	adc	r23, r19
 702:	6e 5f       	subi	r22, 0xFE	; 254
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	ef 5f       	subi	r30, 0xFF	; 255
 708:	ff 4f       	sbci	r31, 0xFF	; 255
 70a:	70 83       	st	Z, r23
 70c:	62 93       	st	-Z, r22
 70e:	ce 5f       	subi	r28, 0xFE	; 254
 710:	df 4f       	sbci	r29, 0xFF	; 255
 712:	69 91       	ld	r22, Y+
 714:	78 81       	ld	r23, Y
 716:	ed 5f       	subi	r30, 0xFD	; 253
 718:	ff 4f       	sbci	r31, 0xFF	; 255
 71a:	70 83       	st	Z, r23
 71c:	62 93       	st	-Z, r22
 71e:	e2 50       	subi	r30, 0x02	; 2
 720:	f0 40       	sbci	r31, 0x00	; 0
 722:	41 17       	cp	r20, r17
 724:	51 07       	cpc	r21, r17
 726:	29 f4       	brne	.+10     	; 0x732 <free+0xe0>
 728:	a8 e5       	ldi	r26, 0x58	; 88
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	ed 93       	st	X+, r30
 72e:	fc 93       	st	X, r31
 730:	56 c0       	rjmp	.+172    	; 0x7de <free+0x18c>
 732:	c4 2f       	mov	r28, r20
 734:	d5 2f       	mov	r29, r21
 736:	cd 5f       	subi	r28, 0xFD	; 253
 738:	df 4f       	sbci	r29, 0xFF	; 255
 73a:	f8 83       	st	Y, r31
 73c:	ea 93       	st	-Y, r30
 73e:	c2 50       	subi	r28, 0x02	; 2
 740:	d0 40       	sbci	r29, 0x00	; 0
 742:	89 91       	ld	r24, Y+
 744:	99 91       	ld	r25, Y+
 746:	c8 0f       	add	r28, r24
 748:	d9 1f       	adc	r29, r25
 74a:	ec 17       	cp	r30, r28
 74c:	fd 07       	cpc	r31, r29
 74e:	b1 f4       	brne	.+44     	; 0x77c <free+0x12a>
 750:	61 91       	ld	r22, Z+
 752:	70 81       	ld	r23, Z
 754:	e1 50       	subi	r30, 0x01	; 1
 756:	f0 40       	sbci	r31, 0x00	; 0
 758:	68 0f       	add	r22, r24
 75a:	79 1f       	adc	r23, r25
 75c:	6e 5f       	subi	r22, 0xFE	; 254
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	c4 2f       	mov	r28, r20
 762:	d5 2f       	mov	r29, r21
 764:	cf 5f       	subi	r28, 0xFF	; 255
 766:	df 4f       	sbci	r29, 0xFF	; 255
 768:	78 83       	st	Y, r23
 76a:	6a 93       	st	-Y, r22
 76c:	ee 5f       	subi	r30, 0xFE	; 254
 76e:	ff 4f       	sbci	r31, 0xFF	; 255
 770:	61 91       	ld	r22, Z+
 772:	70 81       	ld	r23, Z
 774:	cd 5f       	subi	r28, 0xFD	; 253
 776:	df 4f       	sbci	r29, 0xFF	; 255
 778:	78 83       	st	Y, r23
 77a:	6a 93       	st	-Y, r22
 77c:	e0 e0       	ldi	r30, 0x00	; 0
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	ae 5f       	subi	r26, 0xFE	; 254
 782:	bf 4f       	sbci	r27, 0xFF	; 255
 784:	4d 91       	ld	r20, X+
 786:	5c 91       	ld	r21, X
 788:	a3 50       	subi	r26, 0x03	; 3
 78a:	b0 40       	sbci	r27, 0x00	; 0
 78c:	41 17       	cp	r20, r17
 78e:	51 07       	cpc	r21, r17
 790:	29 f0       	breq	.+10     	; 0x79c <free+0x14a>
 792:	ea 2f       	mov	r30, r26
 794:	fb 2f       	mov	r31, r27
 796:	a4 2f       	mov	r26, r20
 798:	b5 2f       	mov	r27, r21
 79a:	f2 cf       	rjmp	.-28     	; 0x780 <free+0x12e>
 79c:	4d 91       	ld	r20, X+
 79e:	5c 91       	ld	r21, X
 7a0:	a1 50       	subi	r26, 0x01	; 1
 7a2:	b0 40       	sbci	r27, 0x00	; 0
 7a4:	6a 2f       	mov	r22, r26
 7a6:	7b 2f       	mov	r23, r27
 7a8:	6e 5f       	subi	r22, 0xFE	; 254
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	46 0f       	add	r20, r22
 7ae:	57 1f       	adc	r21, r23
 7b0:	c6 e5       	ldi	r28, 0x56	; 86
 7b2:	d0 e0       	ldi	r29, 0x00	; 0
 7b4:	69 91       	ld	r22, Y+
 7b6:	78 81       	ld	r23, Y
 7b8:	64 17       	cp	r22, r20
 7ba:	75 07       	cpc	r23, r21
 7bc:	81 f4       	brne	.+32     	; 0x7de <free+0x18c>
 7be:	e1 17       	cp	r30, r17
 7c0:	f1 07       	cpc	r31, r17
 7c2:	29 f4       	brne	.+10     	; 0x7ce <free+0x17c>
 7c4:	e8 e5       	ldi	r30, 0x58	; 88
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	11 93       	st	Z+, r17
 7ca:	10 83       	st	Z, r17
 7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <free+0x184>
 7ce:	ed 5f       	subi	r30, 0xFD	; 253
 7d0:	ff 4f       	sbci	r31, 0xFF	; 255
 7d2:	10 83       	st	Z, r17
 7d4:	12 93       	st	-Z, r17
 7d6:	e6 e5       	ldi	r30, 0x56	; 86
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	a1 93       	st	Z+, r26
 7dc:	b0 83       	st	Z, r27
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	08 95       	ret

000007e8 <_exit>:
 7e8:	f8 94       	cli

000007ea <__stop_program>:
 7ea:	ff cf       	rjmp	.-2      	; 0x7ea <__stop_program>
